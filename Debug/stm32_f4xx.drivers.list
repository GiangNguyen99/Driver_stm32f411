
stm32_f4xx.drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000247c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026d4  080026d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080026d4  080026d4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026d4  080026d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d8  080026d8  000126d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080026dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000078  08002754  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08002754  00020118  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076b1  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000135b  00000000  00000000  00027753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00028ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000398  00000000  00000000  00028ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045de  00000000  00000000  00029268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004cb6  00000000  00000000  0002d846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d17f  00000000  00000000  000324fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0003f67b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001628  00000000  00000000  0003f6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080025fc 	.word	0x080025fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	080025fc 	.word	0x080025fc

080001d8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af00      	add	r7, sp, #0
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	60b9      	str	r1, [r7, #8]
 80001e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001e4:	2300      	movs	r3, #0
 80001e6:	617b      	str	r3, [r7, #20]
 80001e8:	e00a      	b.n	8000200 <_read+0x28>
		*ptr++ = __io_getchar();
 80001ea:	f3af 8000 	nop.w
 80001ee:	4601      	mov	r1, r0
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	1c5a      	adds	r2, r3, #1
 80001f4:	60ba      	str	r2, [r7, #8]
 80001f6:	b2ca      	uxtb	r2, r1
 80001f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80001fa:	697b      	ldr	r3, [r7, #20]
 80001fc:	3301      	adds	r3, #1
 80001fe:	617b      	str	r3, [r7, #20]
 8000200:	697a      	ldr	r2, [r7, #20]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	429a      	cmp	r2, r3
 8000206:	dbf0      	blt.n	80001ea <_read+0x12>
	}

	return len;
 8000208:	687b      	ldr	r3, [r7, #4]
}
 800020a:	4618      	mov	r0, r3
 800020c:	3718      	adds	r7, #24
 800020e:	46bd      	mov	sp, r7
 8000210:	bd80      	pop	{r7, pc}

08000212 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000212:	b580      	push	{r7, lr}
 8000214:	b086      	sub	sp, #24
 8000216:	af00      	add	r7, sp, #0
 8000218:	60f8      	str	r0, [r7, #12]
 800021a:	60b9      	str	r1, [r7, #8]
 800021c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	e009      	b.n	8000238 <_write+0x26>
		__io_putchar(*ptr++);
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	1c5a      	adds	r2, r3, #1
 8000228:	60ba      	str	r2, [r7, #8]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	4618      	mov	r0, r3
 800022e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	3301      	adds	r3, #1
 8000236:	617b      	str	r3, [r7, #20]
 8000238:	697a      	ldr	r2, [r7, #20]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	429a      	cmp	r2, r3
 800023e:	dbf1      	blt.n	8000224 <_write+0x12>
	}
	return len;
 8000240:	687b      	ldr	r3, [r7, #4]
}
 8000242:	4618      	mov	r0, r3
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <_close>:

int _close(int file) {
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
	return -1;
 8000252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000256:	4618      	mov	r0, r3
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr

08000260 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000270:	605a      	str	r2, [r3, #4]
	return 0;
 8000272:	2300      	movs	r3, #0
}
 8000274:	4618      	mov	r0, r3
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr

0800027e <_isatty>:

int _isatty(int file) {
 800027e:	b480      	push	{r7}
 8000280:	b083      	sub	sp, #12
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
	return 1;
 8000286:	2301      	movs	r3, #1
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr

08000292 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000292:	b480      	push	{r7}
 8000294:	b085      	sub	sp, #20
 8000296:	af00      	add	r7, sp, #0
 8000298:	60f8      	str	r0, [r7, #12]
 800029a:	60b9      	str	r1, [r7, #8]
 800029c:	607a      	str	r2, [r7, #4]
	return 0;
 800029e:	2300      	movs	r3, #0
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
	...

080002ac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80002b4:	4a14      	ldr	r2, [pc, #80]	; (8000308 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80002b6:	4b15      	ldr	r3, [pc, #84]	; (800030c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80002b8:	1ad3      	subs	r3, r2, r3
 80002ba:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80002c0:	4b13      	ldr	r3, [pc, #76]	; (8000310 <_sbrk+0x64>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d102      	bne.n	80002ce <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <_sbrk+0x64>)
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <_sbrk+0x68>)
 80002cc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80002ce:	4b10      	ldr	r3, [pc, #64]	; (8000310 <_sbrk+0x64>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	693a      	ldr	r2, [r7, #16]
 80002d8:	429a      	cmp	r2, r3
 80002da:	d207      	bcs.n	80002ec <_sbrk+0x40>
		errno = ENOMEM;
 80002dc:	f001 fc98 	bl	8001c10 <__errno>
 80002e0:	4603      	mov	r3, r0
 80002e2:	220c      	movs	r2, #12
 80002e4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80002e6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ea:	e009      	b.n	8000300 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <_sbrk+0x64>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <_sbrk+0x64>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4413      	add	r3, r2
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <_sbrk+0x64>)
 80002fc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80002fe:	68fb      	ldr	r3, [r7, #12]
}
 8000300:	4618      	mov	r0, r3
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20020000 	.word	0x20020000
 800030c:	00000400 	.word	0x00000400
 8000310:	20000094 	.word	0x20000094
 8000314:	20000118 	.word	0x20000118

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f001 fc69 	bl	8001c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f000 f94b 	bl	80005e4 <main>

0800034e <LoopForever>:

LoopForever:
    b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800035c:	080026dc 	.word	0x080026dc
  ldr r2, =_sbss
 8000360:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000364:	20000118 	.word	0x20000118

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <init_systick_timer>:

/* Enable this macro if you want to test RTC on LCD */
#define PRINT_LCD

void init_systick_timer(uint32_t tick_hz)
{
 800036c:	b480      	push	{r7}
 800036e:	b087      	sub	sp, #28
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*) 0xE000E014;
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <init_systick_timer+0x5c>)
 8000376:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*) 0xE000E010;
 8000378:	4b14      	ldr	r3, [pc, #80]	; (80003cc <init_systick_timer+0x60>)
 800037a:	613b      	str	r3, [r7, #16]

	/* calculation of reload value */
	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <init_systick_timer+0x64>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	fbb2 f3f3 	udiv	r3, r2, r3
 8000384:	3b01      	subs	r3, #1
 8000386:	60fb      	str	r3, [r7, #12]

	//Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]

	//load the value in to SVR
	*pSRVR |= count_value;
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	431a      	orrs	r2, r3
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	601a      	str	r2, [r3, #0]

	//do some settings
	*pSCSR |= (1 << 1); //Enables SysTick exception request:
 800039a:	693b      	ldr	r3, [r7, #16]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f043 0202 	orr.w	r2, r3, #2
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);  //Indicates the clock source, processor clock source
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f043 0204 	orr.w	r2, r3, #4
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	601a      	str	r2, [r3, #0]

	//enable the systick
	*pSCSR |= (1 << 0); //enables the counter
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	601a      	str	r2, [r3, #0]

}
 80003be:	bf00      	nop
 80003c0:	371c      	adds	r7, #28
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr
 80003c8:	e000e014 	.word	0xe000e014
 80003cc:	e000e010 	.word	0xe000e010
 80003d0:	00f42400 	.word	0x00f42400

080003d4 <get_day_of_week>:

char* get_day_of_week(uint8_t i)
{
 80003d4:	b4b0      	push	{r4, r5, r7}
 80003d6:	b08b      	sub	sp, #44	; 0x2c
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	char *days[] =
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <get_day_of_week+0x38>)
 80003e0:	f107 040c 	add.w	r4, r7, #12
 80003e4:	461d      	mov	r5, r3
 80003e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	{ "Sun", "Mon", "Tues", "Wed", "Thurs", "Fri", "Sat" };

	return days[i - 1];
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80003fc:	4413      	add	r3, r2
 80003fe:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8000402:	4618      	mov	r0, r3
 8000404:	372c      	adds	r7, #44	; 0x2c
 8000406:	46bd      	mov	sp, r7
 8000408:	bcb0      	pop	{r4, r5, r7}
 800040a:	4770      	bx	lr
 800040c:	08002638 	.word	0x08002638

08000410 <number_to_string>:

void number_to_string(uint8_t num, char *buf)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	6039      	str	r1, [r7, #0]
 800041a:	71fb      	strb	r3, [r7, #7]

	if (num < 10)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d809      	bhi.n	8000436 <number_to_string+0x26>
	{
		buf[0] = '0';
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	2230      	movs	r2, #48	; 0x30
 8000426:	701a      	strb	r2, [r3, #0]
		buf[1] = num + 48;
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	3301      	adds	r3, #1
 800042c:	79fa      	ldrb	r2, [r7, #7]
 800042e:	3230      	adds	r2, #48	; 0x30
 8000430:	b2d2      	uxtb	r2, r2
 8000432:	701a      	strb	r2, [r3, #0]
	else if (num >= 10 && num < 99)
	{
		buf[0] = (num / 10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 8000434:	e01f      	b.n	8000476 <number_to_string+0x66>
	else if (num >= 10 && num < 99)
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	2b09      	cmp	r3, #9
 800043a:	d91c      	bls.n	8000476 <number_to_string+0x66>
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b62      	cmp	r3, #98	; 0x62
 8000440:	d819      	bhi.n	8000476 <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <number_to_string+0x70>)
 8000446:	fba2 2303 	umull	r2, r3, r2, r3
 800044a:	08db      	lsrs	r3, r3, #3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	3330      	adds	r3, #48	; 0x30
 8000450:	b2da      	uxtb	r2, r3
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8000456:	79fa      	ldrb	r2, [r7, #7]
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <number_to_string+0x70>)
 800045a:	fba3 1302 	umull	r1, r3, r3, r2
 800045e:	08d9      	lsrs	r1, r3, #3
 8000460:	460b      	mov	r3, r1
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	440b      	add	r3, r1
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	b2da      	uxtb	r2, r3
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	3301      	adds	r3, #1
 8000470:	3230      	adds	r2, #48	; 0x30
 8000472:	b2d2      	uxtb	r2, r2
 8000474:	701a      	strb	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	cccccccd 	.word	0xcccccccd

08000484 <time_to_string>:

//hh:mm:ss
char* time_to_string(RTC_time_t *rtc_time)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = ':';
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <time_to_string+0x48>)
 800048e:	223a      	movs	r2, #58	; 0x3a
 8000490:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <time_to_string+0x48>)
 8000494:	223a      	movs	r2, #58	; 0x3a
 8000496:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	490b      	ldr	r1, [pc, #44]	; (80004cc <time_to_string+0x48>)
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ffb6 	bl	8000410 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	4909      	ldr	r1, [pc, #36]	; (80004d0 <time_to_string+0x4c>)
 80004aa:	4618      	mov	r0, r3
 80004ac:	f7ff ffb0 	bl	8000410 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4907      	ldr	r1, [pc, #28]	; (80004d4 <time_to_string+0x50>)
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ffaa 	bl	8000410 <number_to_string>

	buf[8] = '\0';
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <time_to_string+0x48>)
 80004be:	2200      	movs	r2, #0
 80004c0:	721a      	strb	r2, [r3, #8]

	return buf;
 80004c2:	4b02      	ldr	r3, [pc, #8]	; (80004cc <time_to_string+0x48>)

}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000098 	.word	0x20000098
 80004d0:	2000009b 	.word	0x2000009b
 80004d4:	2000009e 	.word	0x2000009e

080004d8 <date_to_string>:

//dd/mm/yy
char* date_to_string(RTC_date_t *rtc_date)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	static char buf[9];

	buf[2] = '/';
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <date_to_string+0x48>)
 80004e2:	222f      	movs	r2, #47	; 0x2f
 80004e4:	709a      	strb	r2, [r3, #2]
	buf[5] = '/';
 80004e6:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <date_to_string+0x48>)
 80004e8:	222f      	movs	r2, #47	; 0x2f
 80004ea:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_date->date, buf);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	490b      	ldr	r1, [pc, #44]	; (8000520 <date_to_string+0x48>)
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff ff8c 	bl	8000410 <number_to_string>
	number_to_string(rtc_date->month, &buf[3]);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	785b      	ldrb	r3, [r3, #1]
 80004fc:	4909      	ldr	r1, [pc, #36]	; (8000524 <date_to_string+0x4c>)
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ff86 	bl	8000410 <number_to_string>
	number_to_string(rtc_date->year, &buf[6]);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	789b      	ldrb	r3, [r3, #2]
 8000508:	4907      	ldr	r1, [pc, #28]	; (8000528 <date_to_string+0x50>)
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff80 	bl	8000410 <number_to_string>

	buf[8] = '\0';
 8000510:	4b03      	ldr	r3, [pc, #12]	; (8000520 <date_to_string+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	721a      	strb	r2, [r3, #8]

	return buf;
 8000516:	4b02      	ldr	r3, [pc, #8]	; (8000520 <date_to_string+0x48>)

}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	200000a4 	.word	0x200000a4
 8000524:	200000a7 	.word	0x200000a7
 8000528:	200000aa 	.word	0x200000aa

0800052c <mdelay>:

static void mdelay(uint32_t cnt)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (cnt * 1000); i++)
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e002      	b.n	8000540 <mdelay+0x14>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	3301      	adds	r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000546:	fb02 f303 	mul.w	r3, r2, r3
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	429a      	cmp	r2, r3
 800054e:	d3f4      	bcc.n	800053a <mdelay+0xe>
		;
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <GPIO_alarmInit>:
	GPIO_Init(&GPIOBtn);

}

void GPIO_alarmInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_led1, GPIO_al;
	//internal led 1: PD12
	GPIO_led1.pGPIOx = GPIOD;
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <GPIO_alarmInit+0x5c>)
 8000564:	60fb      	str	r3, [r7, #12]
	GPIO_led1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000566:	230c      	movs	r3, #12
 8000568:	743b      	strb	r3, [r7, #16]
	GPIO_led1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800056a:	2301      	movs	r3, #1
 800056c:	747b      	strb	r3, [r7, #17]
	GPIO_led1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800056e:	2302      	movs	r3, #2
 8000570:	74bb      	strb	r3, [r7, #18]
	GPIO_led1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000572:	2300      	movs	r3, #0
 8000574:	753b      	strb	r3, [r7, #20]
	GPIO_led1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000576:	2301      	movs	r3, #1
 8000578:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIO_led1);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fdb6 	bl	80010f0 <GPIO_Init>

	//external alarm PA3
	GPIO_al.pGPIOx = GPIOA;
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <GPIO_alarmInit+0x60>)
 8000586:	603b      	str	r3, [r7, #0]
	GPIO_al.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000588:	2303      	movs	r3, #3
 800058a:	713b      	strb	r3, [r7, #4]
	GPIO_al.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800058c:	2304      	movs	r3, #4
 800058e:	717b      	strb	r3, [r7, #5]
	GPIO_al.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000590:	2302      	movs	r3, #2
 8000592:	71bb      	strb	r3, [r7, #6]
	GPIO_al.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000594:	2301      	movs	r3, #1
 8000596:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&GPIO_al);
 8000598:	463b      	mov	r3, r7
 800059a:	4618      	mov	r0, r3
 800059c:	f000 fda8 	bl	80010f0 <GPIO_Init>

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI3, NVIC_IRQ_PRI_1);
 80005a0:	2101      	movs	r1, #1
 80005a2:	2009      	movs	r0, #9
 80005a4:	f000 ffc2 	bl	800152c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI3, ENABLE);
 80005a8:	2101      	movs	r1, #1
 80005aa:	2009      	movs	r0, #9
 80005ac:	f000 ff3a 	bl	8001424 <GPIO_IRQInterruptConfig>

}
 80005b0:	bf00      	nop
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40020c00 	.word	0x40020c00
 80005bc:	40020000 	.word	0x40020000

080005c0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	mdelay(5);
 80005c4:	2005      	movs	r0, #5
 80005c6:	f7ff ffb1 	bl	800052c <mdelay>
	GPIO_IRQHandling(GPIO_PIN_NO_3);
 80005ca:	2003      	movs	r0, #3
 80005cc:	f000 ffd8 	bl	8001580 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80005d0:	210c      	movs	r1, #12
 80005d2:	4803      	ldr	r0, [pc, #12]	; (80005e0 <EXTI3_IRQHandler+0x20>)
 80005d4:	f000 ff12 	bl	80013fc <GPIO_ToggleOutputPin>
	ds3231_clear_sr();
 80005d8:	f000 fb9a 	bl	8000d10 <ds3231_clear_sr>

}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40020c00 	.word	0x40020c00

080005e4 <main>:
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
//	{
//		//wait till button is pressed
//		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_1))
//			;
//		mdelay(200);
	lcd_init_i2c();
 80005ea:	f000 fc49 	bl	8000e80 <lcd_init_i2c>
	printf("RTC test\n");
#else

#endif

	lcd_display_clear_i2c();
 80005ee:	f000 fb97 	bl	8000d20 <lcd_display_clear_i2c>

	lcd_display_return_home_i2c();
 80005f2:	f000 fcd2 	bl	8000f9a <lcd_display_return_home_i2c>
	if (ds3231_init())
 80005f6:	f000 f8cb 	bl	8000790 <ds3231_init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d003      	beq.n	8000608 <main+0x24>
	{
		printf("RTC init has failed\n");
 8000600:	4835      	ldr	r0, [pc, #212]	; (80006d8 <main+0xf4>)
 8000602:	f001 fba5 	bl	8001d50 <puts>
		while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x22>
			;
	}

	current_date.day = FRIDAY
 8000608:	2306      	movs	r3, #6
 800060a:	73fb      	strb	r3, [r7, #15]
	;
	current_date.date = 25;
 800060c:	2319      	movs	r3, #25
 800060e:	733b      	strb	r3, [r7, #12]
	current_date.month =8;
 8000610:	2308      	movs	r3, #8
 8000612:	737b      	strb	r3, [r7, #13]
	current_date.year = 23;
 8000614:	2317      	movs	r3, #23
 8000616:	73bb      	strb	r3, [r7, #14]

	current_time.hours = 11;
 8000618:	230b      	movs	r3, #11
 800061a:	74bb      	strb	r3, [r7, #18]
	current_time.minutes = 59;
 800061c:	233b      	movs	r3, #59	; 0x3b
 800061e:	747b      	strb	r3, [r7, #17]
	current_time.seconds = 30;
 8000620:	231e      	movs	r3, #30
 8000622:	743b      	strb	r3, [r7, #16]
	current_time.time_format = TIME_FORMAT_12HRS_PM;
 8000624:	2301      	movs	r3, #1
 8000626:	74fb      	strb	r3, [r7, #19]

	time_alarm1.hours = 11;
 8000628:	230b      	movs	r3, #11
 800062a:	72bb      	strb	r3, [r7, #10]
	time_alarm1.minutes = 59;
 800062c:	233b      	movs	r3, #59	; 0x3b
 800062e:	727b      	strb	r3, [r7, #9]
	time_alarm1.seconds = 40;
 8000630:	2328      	movs	r3, #40	; 0x28
 8000632:	723b      	strb	r3, [r7, #8]
	time_alarm1.time_format = TIME_FORMAT_12HRS_PM;
 8000634:	2301      	movs	r3, #1
 8000636:	72fb      	strb	r3, [r7, #11]
	date_alarm1.day = FRIDAY
 8000638:	2306      	movs	r3, #6
 800063a:	71fb      	strb	r3, [r7, #7]
	;

	ds3231_set_current_date(&current_date);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f910 	bl	8000866 <ds3231_set_current_date>
	ds3231_set_current_time(&current_time);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f8c2 	bl	80007d4 <ds3231_set_current_time>
	ds3231_set_time_alarm1(&time_alarm1, &date_alarm1, DS3231_MB_AL1_5);
 8000650:	1d39      	adds	r1, r7, #4
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2210      	movs	r2, #16
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fa89 	bl	8000b70 <ds3231_set_time_alarm1>

	ds3231_get_current_time(&current_time);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f935 	bl	80008d2 <ds3231_get_current_time>
	ds3231_get_current_date(&current_date);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4618      	mov	r0, r3
 800066e:	f000 f979 	bl	8000964 <ds3231_get_current_date>

	GPIO_alarmInit();
 8000672:	f7ff ff73 	bl	800055c <GPIO_alarmInit>
	init_systick_timer(1);
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff fe78 	bl	800036c <init_systick_timer>
	char *am_pm;
	if (current_time.time_format != TIME_FORMAT_24HRS)
 800067c:	7cfb      	ldrb	r3, [r7, #19]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d013      	beq.n	80006aa <main+0xc6>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 8000682:	7cfb      	ldrb	r3, [r7, #19]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <main+0xa8>
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <main+0xf8>)
 800068a:	e000      	b.n	800068e <main+0xaa>
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <main+0xfc>)
 800068e:	617b      	str	r3, [r7, #20]
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
//		lcd_print_string(time_to_string(&current_time));
//		lcd_print_string(am_pm);

		lcd_send_string(time_to_string(&current_time));
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fef5 	bl	8000484 <time_to_string>
 800069a:	4603      	mov	r3, r0
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fc67 	bl	8000f70 <lcd_send_string>
		lcd_send_string(am_pm);
 80006a2:	6978      	ldr	r0, [r7, #20]
 80006a4:	f000 fc64 	bl	8000f70 <lcd_send_string>
 80006a8:	e008      	b.n	80006bc <main+0xd8>
	{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
//		lcd_print_string(time_to_string(&current_time));
		lcd_send_string(time_to_string(&current_time));
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fee8 	bl	8000484 <time_to_string>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fc5a 	bl	8000f70 <lcd_send_string>
#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
//	lcd_set_cursor(2, 1);
//	lcd_print_string(date_to_string(&current_date));
	lcd_put_cur(2, 1);
 80006bc:	2101      	movs	r1, #1
 80006be:	2002      	movs	r0, #2
 80006c0:	f000 fbb0 	bl	8000e24 <lcd_put_cur>
	lcd_send_string(date_to_string(&current_date));
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff05 	bl	80004d8 <date_to_string>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fc4d 	bl	8000f70 <lcd_send_string>

#endif
	while (1)
 80006d6:	e7fe      	b.n	80006d6 <main+0xf2>
 80006d8:	08002654 	.word	0x08002654
 80006dc:	08002668 	.word	0x08002668
 80006e0:	0800266c 	.word	0x0800266c

080006e4 <SysTick_Handler>:

	return 0;
}

void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	ds3231_get_current_time(&current_time);
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f8ef 	bl	80008d2 <ds3231_get_current_time>

	char *am_pm;
	if (current_time.time_format != TIME_FORMAT_24HRS)
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d017      	beq.n	800072a <SysTick_Handler+0x46>
	{
		am_pm = (current_time.time_format) ? "PM" : "AM";
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SysTick_Handler+0x20>
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SysTick_Handler+0xa4>)
 8000702:	e000      	b.n	8000706 <SysTick_Handler+0x22>
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <SysTick_Handler+0xa8>)
 8000706:	60fb      	str	r3, [r7, #12]
#ifndef PRINT_LCD
		printf("Current time = %s %s\n",time_to_string(&current_time),am_pm); // 04:25:41 PM
#else
		lcd_put_cur(1, 1);
 8000708:	2101      	movs	r1, #1
 800070a:	2001      	movs	r0, #1
 800070c:	f000 fb8a 	bl	8000e24 <lcd_put_cur>
		lcd_send_string(time_to_string(&current_time));
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff feb5 	bl	8000484 <time_to_string>
 800071a:	4603      	mov	r3, r0
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fc27 	bl	8000f70 <lcd_send_string>
		lcd_send_string(am_pm);
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f000 fc24 	bl	8000f70 <lcd_send_string>
 8000728:	e00c      	b.n	8000744 <SysTick_Handler+0x60>
	else
	{
#ifndef PRINT_LCD
		printf("Current time = %s\n",time_to_string(&current_time)); // 04:25:41
#else
		lcd_put_cur(1, 1);
 800072a:	2101      	movs	r1, #1
 800072c:	2001      	movs	r0, #1
 800072e:	f000 fb79 	bl	8000e24 <lcd_put_cur>
		lcd_send_string(time_to_string(&current_time));
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fea4 	bl	8000484 <time_to_string>
 800073c:	4603      	mov	r3, r0
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fc16 	bl	8000f70 <lcd_send_string>
#endif
	}

	ds3231_get_current_date(&current_date);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f90c 	bl	8000964 <ds3231_get_current_date>

#ifndef PRINT_LCD
	printf("Current date = %s <%s>\n",date_to_string(&current_date), get_day_of_week(current_date.day));
#else
	lcd_put_cur(2, 1);
 800074c:	2101      	movs	r1, #1
 800074e:	2002      	movs	r0, #2
 8000750:	f000 fb68 	bl	8000e24 <lcd_put_cur>
	lcd_send_string(date_to_string(&current_date));
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff febe 	bl	80004d8 <date_to_string>
 800075c:	4603      	mov	r3, r0
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fc06 	bl	8000f70 <lcd_send_string>
	lcd_send_data('<');
 8000764:	203c      	movs	r0, #60	; 0x3c
 8000766:	f000 fb2d 	bl	8000dc4 <lcd_send_data>
	lcd_send_string(get_day_of_week(current_date.day));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fe31 	bl	80003d4 <get_day_of_week>
 8000772:	4603      	mov	r3, r0
 8000774:	4618      	mov	r0, r3
 8000776:	f000 fbfb 	bl	8000f70 <lcd_send_string>
	lcd_send_data('>');
 800077a:	203e      	movs	r0, #62	; 0x3e
 800077c:	f000 fb22 	bl	8000dc4 <lcd_send_data>
#endif

}
 8000780:	bf00      	nop
 8000782:	3710      	adds	r7, #16
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	08002668 	.word	0x08002668
 800078c:	0800266c 	.word	0x0800266c

08000790 <ds3231_init>:
I2C_Handle_t g_ds3231I2cHandle;

//returns 1 : CH = 1 ; init failed
//returns 0 : CH = 0 ; init success
uint8_t ds3231_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

	//1. init the i2c pins
	ds3231_i2c_pin_config();
 8000796:	f000 f919 	bl	80009cc <ds3231_i2c_pin_config>

	//2. initialize the i2c peripheral
	ds3231_i2c_config();
 800079a:	f000 f953 	bl	8000a44 <ds3231_i2c_config>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(DS3231_I2C, ENABLE);
 800079e:	2101      	movs	r1, #1
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <ds3231_init+0x40>)
 80007a2:	f001 f98c 	bl	8001abe <I2C_PeripheralControl>
//	//5. Read back clock halt bit
//	uint8_t clock_state = ds3231_read(DS3231_ADDR_SEC);
//
//	return ((clock_state >> 7 ) & 0x1);

	ds3231_write(DS3231_CR_DI_AL12, DS3231_ADDR_CR);
 80007a6:	210e      	movs	r1, #14
 80007a8:	201c      	movs	r0, #28
 80007aa:	f000 f961 	bl	8000a70 <ds3231_write>

	//4. Make  Oscillator Stop Flag in SR OSF = 0;
	ds3231_write(0x00, DS3231_ADDR_SR);
 80007ae:	210f      	movs	r1, #15
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 f95d 	bl	8000a70 <ds3231_write>

	//5. Read back clock halt bit
	uint8_t clock_state = ds3231_read(DS3231_ADDR_SR);
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 f976 	bl	8000aa8 <ds3231_read>
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]

	// if OSF = 1 oscillator was stopped
	return ((clock_state >> 7) & 0x1);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	09db      	lsrs	r3, r3, #7
 80007c4:	b2db      	uxtb	r3, r3
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40005400 	.word	0x40005400

080007d4 <ds3231_set_current_time>:

void ds3231_set_current_time(RTC_time_t *rtc_time)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	uint8_t seconds, hrs;
	seconds = binary_to_bcd(rtc_time->seconds);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f97f 	bl	8000ae4 <binary_to_bcd>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73bb      	strb	r3, [r7, #14]
	seconds &= ~(1 << 7);
 80007ea:	7bbb      	ldrb	r3, [r7, #14]
 80007ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007f0:	73bb      	strb	r3, [r7, #14]
	ds3231_write(seconds, DS3231_ADDR_SEC);
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f93a 	bl	8000a70 <ds3231_write>

	ds3231_write(binary_to_bcd(rtc_time->minutes), DS3231_ADDR_MIN);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	785b      	ldrb	r3, [r3, #1]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f96f 	bl	8000ae4 <binary_to_bcd>
 8000806:	4603      	mov	r3, r0
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f930 	bl	8000a70 <ds3231_write>

	hrs = binary_to_bcd(rtc_time->hours);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f965 	bl	8000ae4 <binary_to_bcd>
 800081a:	4603      	mov	r3, r0
 800081c:	73fb      	strb	r3, [r7, #15]

	if (rtc_time->time_format == TIME_FORMAT_24HRS)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	78db      	ldrb	r3, [r3, #3]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d104      	bne.n	8000830 <ds3231_set_current_time+0x5c>
	{
		hrs &= ~(1 << 6);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800082c:	73fb      	strb	r3, [r7, #15]
 800082e:	e011      	b.n	8000854 <ds3231_set_current_time+0x80>
	}
	else
	{
		hrs |= (1 << 6);
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000836:	73fb      	strb	r3, [r7, #15]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ?
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	78db      	ldrb	r3, [r3, #3]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d104      	bne.n	800084a <ds3231_set_current_time+0x76>
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	f043 0320 	orr.w	r3, r3, #32
 8000846:	b2db      	uxtb	r3, r3
 8000848:	e003      	b.n	8000852 <ds3231_set_current_time+0x7e>
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f023 0320 	bic.w	r3, r3, #32
 8000850:	b2db      	uxtb	r3, r3
 8000852:	73fb      	strb	r3, [r7, #15]
				hrs | (1 << 5) : hrs & ~(1 << 5);
	}

	ds3231_write(hrs, DS3231_ADDR_HRS);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2102      	movs	r1, #2
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f909 	bl	8000a70 <ds3231_write>

}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <ds3231_set_current_date>:

void ds3231_set_current_date(RTC_date_t *rtc_date)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	uint8_t mon;

	ds3231_write(binary_to_bcd(rtc_date->day), DS3231_ADDR_DAY);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	78db      	ldrb	r3, [r3, #3]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f936 	bl	8000ae4 <binary_to_bcd>
 8000878:	4603      	mov	r3, r0
 800087a:	2103      	movs	r1, #3
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f8f7 	bl	8000a70 <ds3231_write>

	ds3231_write(binary_to_bcd(rtc_date->date), DS3231_ADDR_DATE);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f92c 	bl	8000ae4 <binary_to_bcd>
 800088c:	4603      	mov	r3, r0
 800088e:	2104      	movs	r1, #4
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f8ed 	bl	8000a70 <ds3231_write>

	mon = binary_to_bcd(rtc_date->month);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	785b      	ldrb	r3, [r3, #1]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f922 	bl	8000ae4 <binary_to_bcd>
 80008a0:	4603      	mov	r3, r0
 80008a2:	73fb      	strb	r3, [r7, #15]
	mon &= ~(1 << 7);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008aa:	73fb      	strb	r3, [r7, #15]
	ds3231_write(mon, DS3231_ADDR_MONTH);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2105      	movs	r1, #5
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f8dd 	bl	8000a70 <ds3231_write>

	ds3231_write(binary_to_bcd(rtc_date->year), DS3231_ADDR_YEAR);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f000 f912 	bl	8000ae4 <binary_to_bcd>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2106      	movs	r1, #6
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 f8d3 	bl	8000a70 <ds3231_write>

}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <ds3231_get_current_time>:

void ds3231_get_current_time(RTC_time_t *rtc_time)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]

	uint8_t seconds, hrs;

	seconds = ds3231_read(DS3231_ADDR_SEC);
 80008da:	2000      	movs	r0, #0
 80008dc:	f000 f8e4 	bl	8000aa8 <ds3231_read>
 80008e0:	4603      	mov	r3, r0
 80008e2:	73bb      	strb	r3, [r7, #14]

	seconds &= ~(1 << 7);
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ea:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 80008ec:	7bbb      	ldrb	r3, [r7, #14]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f924 	bl	8000b3c <bcd_to_binary>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(ds3231_read(DS3231_ADDR_MIN));
 80008fc:	2001      	movs	r0, #1
 80008fe:	f000 f8d3 	bl	8000aa8 <ds3231_read>
 8000902:	4603      	mov	r3, r0
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f919 	bl	8000b3c <bcd_to_binary>
 800090a:	4603      	mov	r3, r0
 800090c:	461a      	mov	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	705a      	strb	r2, [r3, #1]

	hrs = ds3231_read(DS3231_ADDR_HRS);
 8000912:	2002      	movs	r0, #2
 8000914:	f000 f8c8 	bl	8000aa8 <ds3231_read>
 8000918:	4603      	mov	r3, r0
 800091a:	73fb      	strb	r3, [r7, #15]
	if (hrs & (1 << 6))
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00f      	beq.n	8000946 <ds3231_get_current_time+0x74>
	{
		//12 hr format
		rtc_time->time_format = !((hrs & (1 << 5)) == 0);
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	70da      	strb	r2, [r3, #3]
		hrs &= ~(0x3 << 5); //Clear 6 and 5
 800093c:	7bfb      	ldrb	r3, [r7, #15]
 800093e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000942:	73fb      	strb	r3, [r7, #15]
 8000944:	e002      	b.n	800094c <ds3231_get_current_time+0x7a>
	}
	else
	{
		//24 hr format
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2202      	movs	r2, #2
 800094a:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hrs);
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f8f4 	bl	8000b3c <bcd_to_binary>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	709a      	strb	r2, [r3, #2]
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <ds3231_get_current_date>:

void ds3231_get_current_date(RTC_date_t *rtc_date)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	rtc_date->day = bcd_to_binary(ds3231_read(DS3231_ADDR_DAY));
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f89b 	bl	8000aa8 <ds3231_read>
 8000972:	4603      	mov	r3, r0
 8000974:	4618      	mov	r0, r3
 8000976:	f000 f8e1 	bl	8000b3c <bcd_to_binary>
 800097a:	4603      	mov	r3, r0
 800097c:	461a      	mov	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	70da      	strb	r2, [r3, #3]
	rtc_date->date = bcd_to_binary(ds3231_read(DS3231_ADDR_DATE));
 8000982:	2004      	movs	r0, #4
 8000984:	f000 f890 	bl	8000aa8 <ds3231_read>
 8000988:	4603      	mov	r3, r0
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f8d6 	bl	8000b3c <bcd_to_binary>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	701a      	strb	r2, [r3, #0]
	rtc_date->month = bcd_to_binary(ds3231_read(DS3231_ADDR_MONTH));
 8000998:	2005      	movs	r0, #5
 800099a:	f000 f885 	bl	8000aa8 <ds3231_read>
 800099e:	4603      	mov	r3, r0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f8cb 	bl	8000b3c <bcd_to_binary>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	705a      	strb	r2, [r3, #1]
	rtc_date->year = bcd_to_binary(ds3231_read(DS3231_ADDR_YEAR));
 80009ae:	2006      	movs	r0, #6
 80009b0:	f000 f87a 	bl	8000aa8 <ds3231_read>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f8c0 	bl	8000b3c <bcd_to_binary>
 80009bc:	4603      	mov	r3, r0
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	709a      	strb	r2, [r3, #2]

}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <ds3231_i2c_pin_config>:

static void ds3231_i2c_pin_config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;

	memset(&i2c_sda, 0, sizeof(i2c_sda));
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	220c      	movs	r2, #12
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f942 	bl	8001c64 <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 80009e0:	463b      	mov	r3, r7
 80009e2:	220c      	movs	r2, #12
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f93c 	bl	8001c64 <memset>
	/*
	 * I2C1_SCL ==> PB6
	 * I2C1_SDA ==> PB7
	 */

	i2c_sda.pGPIOx = DS3231_I2C_GPIO_PORT;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <ds3231_i2c_pin_config+0x74>)
 80009ee:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009f4:	2302      	movs	r3, #2
 80009f6:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS3231_I2C_SDA_PIN;
 80009f8:	2307      	movs	r3, #7
 80009fa:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009fc:	2301      	movs	r3, #1
 80009fe:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS3231_I2C_PUPD;
 8000a00:	2301      	movs	r3, #1
 8000a02:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a04:	2302      	movs	r3, #2
 8000a06:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&i2c_sda);
 8000a08:	f107 030c 	add.w	r3, r7, #12
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fb6f 	bl	80010f0 <GPIO_Init>

	i2c_scl.pGPIOx = DS3231_I2C_GPIO_PORT;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <ds3231_i2c_pin_config+0x74>)
 8000a14:	603b      	str	r3, [r7, #0]
	i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000a16:	2304      	movs	r3, #4
 8000a18:	727b      	strb	r3, [r7, #9]
	i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	717b      	strb	r3, [r7, #5]
	i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS3231_I2C_SCL_PIN;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	713b      	strb	r3, [r7, #4]
	i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a22:	2300      	movs	r3, #0
 8000a24:	723b      	strb	r3, [r7, #8]
	i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS3231_I2C_PUPD;
 8000a26:	2301      	movs	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
	i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&i2c_scl);
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fb5d 	bl	80010f0 <GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020400 	.word	0x40020400

08000a44 <ds3231_i2c_config>:

static void ds3231_i2c_config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	g_ds3231I2cHandle.pI2Cx = DS3231_I2C;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <ds3231_i2c_config+0x20>)
 8000a4a:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <ds3231_i2c_config+0x24>)
 8000a4c:	601a      	str	r2, [r3, #0]
	g_ds3231I2cHandle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <ds3231_i2c_config+0x20>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	725a      	strb	r2, [r3, #9]
	g_ds3231I2cHandle.I2C_Config.I2C_SCLSpeed = DS3231_I2C_SPEED;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <ds3231_i2c_config+0x20>)
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <ds3231_i2c_config+0x28>)
 8000a58:	605a      	str	r2, [r3, #4]
	I2C_Init(&g_ds3231I2cHandle);
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <ds3231_i2c_config+0x20>)
 8000a5c:	f000 fe88 	bl	8001770 <I2C_Init>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000b8 	.word	0x200000b8
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	000186a0 	.word	0x000186a0

08000a70 <ds3231_write>:

static void ds3231_write(uint8_t value, uint8_t reg_addr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	4603      	mov	r3, r0
 8000a78:	460a      	mov	r2, r1
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71bb      	strb	r3, [r7, #6]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&g_ds3231I2cHandle, tx, 2, DS3231_I2C_ADDRESS, 0);
 8000a88:	f107 010c 	add.w	r1, r7, #12
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2368      	movs	r3, #104	; 0x68
 8000a92:	2202      	movs	r2, #2
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <ds3231_write+0x34>)
 8000a96:	f000 ff1d 	bl	80018d4 <I2C_MasterSendData>
}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000b8 	.word	0x200000b8

08000aa8 <ds3231_read>:

static uint8_t ds3231_read(uint8_t reg_addr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	I2C_MasterSendData(&g_ds3231I2cHandle, &reg_addr, 1, DS3231_I2C_ADDRESS, 0);
 8000ab2:	1df9      	adds	r1, r7, #7
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2368      	movs	r3, #104	; 0x68
 8000aba:	2201      	movs	r2, #1
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <ds3231_read+0x38>)
 8000abe:	f000 ff09 	bl	80018d4 <I2C_MasterSendData>
	I2C_MasterReceiveData(&g_ds3231I2cHandle, &data, 1, DS3231_I2C_ADDRESS, 0);
 8000ac2:	f107 010f 	add.w	r1, r7, #15
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2368      	movs	r3, #104	; 0x68
 8000acc:	2201      	movs	r2, #1
 8000ace:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <ds3231_read+0x38>)
 8000ad0:	f000 ff63 	bl	800199a <I2C_MasterReceiveData>

	return data;
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000b8 	.word	0x200000b8

08000ae4 <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t value)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	uint8_t bcd;

	bcd = value;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	73fb      	strb	r3, [r7, #15]
	if (value >= 10)
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b09      	cmp	r3, #9
 8000af6:	d918      	bls.n	8000b2a <binary_to_bcd+0x46>
	{
		m = value / 10;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <binary_to_bcd+0x54>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <binary_to_bcd+0x54>)
 8000b08:	fba3 1302 	umull	r1, r3, r3, r2
 8000b0c:	08d9      	lsrs	r1, r3, #3
 8000b0e:	460b      	mov	r3, r1
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	440b      	add	r3, r1
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n;
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	011b      	lsls	r3, r3, #4
 8000b1e:	b25a      	sxtb	r2, r3
 8000b20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	cccccccd 	.word	0xcccccccd

08000b3c <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t value)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	uint8_t m, n;
	m = (uint8_t) ((value >> 4) * 10);
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
	n = value & (uint8_t) 0x0F;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 030f 	and.w	r3, r3, #15
 8000b5c:	73bb      	strb	r3, [r7, #14]
	return (m + n);
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	4413      	add	r3, r2
 8000b64:	b2db      	uxtb	r3, r3
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <ds3231_set_time_alarm1>:

void ds3231_set_time_alarm1(RTC_time_t *rtc_time, RTC_date_t *rtc_date,
		uint8_t mode_alarm)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t seconds, minutes, hrs;
	uint8_t temp1 = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75bb      	strb	r3, [r7, #22]
	uint8_t day, date;

	seconds = binary_to_bcd(rtc_time->seconds);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffac 	bl	8000ae4 <binary_to_bcd>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	757b      	strb	r3, [r7, #21]
	temp1 = mode_alarm & 0x01;
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	75bb      	strb	r3, [r7, #22]
	seconds |= (temp1 << 7);
 8000b98:	7dbb      	ldrb	r3, [r7, #22]
 8000b9a:	01db      	lsls	r3, r3, #7
 8000b9c:	b25a      	sxtb	r2, r3
 8000b9e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	757b      	strb	r3, [r7, #21]
	ds3231_write(seconds, DS3231_ADDR_SEC_AL1);
 8000ba8:	7d7b      	ldrb	r3, [r7, #21]
 8000baa:	2107      	movs	r1, #7
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <ds3231_write>

	temp1 = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	75bb      	strb	r3, [r7, #22]
	minutes = binary_to_bcd(rtc_time->minutes);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff ff92 	bl	8000ae4 <binary_to_bcd>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	753b      	strb	r3, [r7, #20]
	temp1 = mode_alarm & 0x02;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	75bb      	strb	r3, [r7, #22]
	minutes |= (temp1 << 6);
 8000bcc:	7dbb      	ldrb	r3, [r7, #22]
 8000bce:	019b      	lsls	r3, r3, #6
 8000bd0:	b25a      	sxtb	r2, r3
 8000bd2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	753b      	strb	r3, [r7, #20]
	ds3231_write(binary_to_bcd(rtc_time->minutes), DS3231_ADDR_MIN_AL1);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	785b      	ldrb	r3, [r3, #1]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff7f 	bl	8000ae4 <binary_to_bcd>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2108      	movs	r1, #8
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff40 	bl	8000a70 <ds3231_write>

	temp1 = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	75bb      	strb	r3, [r7, #22]

	hrs = binary_to_bcd(rtc_time->hours);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	789b      	ldrb	r3, [r3, #2]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff73 	bl	8000ae4 <binary_to_bcd>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	75fb      	strb	r3, [r7, #23]

	if (rtc_time->time_format == TIME_FORMAT_24HRS)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	78db      	ldrb	r3, [r3, #3]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d104      	bne.n	8000c14 <ds3231_set_time_alarm1+0xa4>
	{
		hrs &= ~(1 << 6);
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c10:	75fb      	strb	r3, [r7, #23]
 8000c12:	e011      	b.n	8000c38 <ds3231_set_time_alarm1+0xc8>
	}
	else
	{
		hrs |= (1 << 6);
 8000c14:	7dfb      	ldrb	r3, [r7, #23]
 8000c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1a:	75fb      	strb	r3, [r7, #23]
		hrs = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ?
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	78db      	ldrb	r3, [r3, #3]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d104      	bne.n	8000c2e <ds3231_set_time_alarm1+0xbe>
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
 8000c26:	f043 0320 	orr.w	r3, r3, #32
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	e003      	b.n	8000c36 <ds3231_set_time_alarm1+0xc6>
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	f023 0320 	bic.w	r3, r3, #32
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	75fb      	strb	r3, [r7, #23]
				hrs | (1 << 5) : hrs & ~(1 << 5);
	}
	temp1 = mode_alarm & 0x04;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	75bb      	strb	r3, [r7, #22]
	hrs |= (temp1 << 5);
 8000c40:	7dbb      	ldrb	r3, [r7, #22]
 8000c42:	015b      	lsls	r3, r3, #5
 8000c44:	b25a      	sxtb	r2, r3
 8000c46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	75fb      	strb	r3, [r7, #23]
	ds3231_write(hrs, DS3231_ADDR_HRS_AL1);
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2109      	movs	r1, #9
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff0b 	bl	8000a70 <ds3231_write>

	temp1 = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75bb      	strb	r3, [r7, #22]
	if (rtc_date->day)
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	78db      	ldrb	r3, [r3, #3]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d026      	beq.n	8000cb4 <ds3231_set_time_alarm1+0x144>
	{
		day = binary_to_bcd(rtc_date->day);
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	78db      	ldrb	r3, [r3, #3]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff3a 	bl	8000ae4 <binary_to_bcd>
 8000c70:	4603      	mov	r3, r0
 8000c72:	74bb      	strb	r3, [r7, #18]
		temp1 = mode_alarm & 0x10;
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	75bb      	strb	r3, [r7, #22]
		day |= (temp1 << 2);
 8000c7c:	7dbb      	ldrb	r3, [r7, #22]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b25b      	sxtb	r3, r3
 8000c8a:	74bb      	strb	r3, [r7, #18]
		temp1 = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	75bb      	strb	r3, [r7, #22]
		temp1 = mode_alarm & 0x8;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 0308 	and.w	r3, r3, #8
 8000c96:	75bb      	strb	r3, [r7, #22]
		day |= (temp1 << 4);
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	74bb      	strb	r3, [r7, #18]
		ds3231_write(day, DS3231_ADDR_DYDT_AL1);
 8000ca8:	7cbb      	ldrb	r3, [r7, #18]
 8000caa:	210a      	movs	r1, #10
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fedf 	bl	8000a70 <ds3231_write>
 8000cb2:	e025      	b.n	8000d00 <ds3231_set_time_alarm1+0x190>

	}
	else
	{
		date = binary_to_bcd(rtc_date->date);
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff13 	bl	8000ae4 <binary_to_bcd>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	74fb      	strb	r3, [r7, #19]
		temp1 = mode_alarm & 0x10;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	75bb      	strb	r3, [r7, #22]
		date |= (temp1 << 2);
 8000cca:	7dbb      	ldrb	r3, [r7, #22]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	b25a      	sxtb	r2, r3
 8000cd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	b25b      	sxtb	r3, r3
 8000cd8:	74fb      	strb	r3, [r7, #19]
		temp1 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75bb      	strb	r3, [r7, #22]
		temp1 = mode_alarm & 0x8;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 0308 	and.w	r3, r3, #8
 8000ce4:	75bb      	strb	r3, [r7, #22]
		date |= (temp1 << 4);
 8000ce6:	7dbb      	ldrb	r3, [r7, #22]
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	b25a      	sxtb	r2, r3
 8000cec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	74fb      	strb	r3, [r7, #19]

		ds3231_write(date, DS3231_ADDR_DYDT_AL1);
 8000cf6:	7cfb      	ldrb	r3, [r7, #19]
 8000cf8:	210a      	movs	r1, #10
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff feb8 	bl	8000a70 <ds3231_write>
	}
	ds3231_write(DS3231_CR_EN_AL1, DS3231_ADDR_CR);
 8000d00:	210e      	movs	r1, #14
 8000d02:	201d      	movs	r0, #29
 8000d04:	f7ff feb4 	bl	8000a70 <ds3231_write>

}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <ds3231_clear_sr>:

void ds3231_clear_sr(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	ds3231_write(0x8, DS3231_ADDR_SR);
 8000d14:	210f      	movs	r1, #15
 8000d16:	2008      	movs	r0, #8
 8000d18:	f7ff feaa 	bl	8000a70 <ds3231_write>

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <lcd_display_clear_i2c>:
	 */

	mdelay(2);
}
void lcd_display_clear_i2c(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	//Display clear
	lcd_send_cmd(LCD_CMD_DIS_CLEAR);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 f81d 	bl	8000d64 <lcd_send_cmd>
	/*
	 * check page number 24 of datasheet.
	 * display clear command execution wait time is around 2ms
	 */

	mdelay(2);
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f000 f802 	bl	8000d34 <mdelay>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <mdelay>:
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, GPIO_PIN_RESET);
	udelay(50);/* execution time > 37 micro seconds */
}

static void mdelay(uint32_t cnt)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (cnt * 1000); i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e002      	b.n	8000d48 <mdelay+0x14>
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	3301      	adds	r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d4e:	fb02 f303 	mul.w	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d3f4      	bcc.n	8000d42 <mdelay+0xe>
		;
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <lcd_send_cmd>:
 *
 *
 * */

void lcd_send_cmd(char cmd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xf0);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f023 030f 	bic.w	r3, r3, #15
 8000d74:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xf0);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = (uint8_t) data_u | 0x0C;  //en=1, rs=0
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	f043 030c 	orr.w	r3, r3, #12
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	723b      	strb	r3, [r7, #8]
	data_t[1] = (uint8_t) data_u | 0x08;  //en=0, rs=0
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	727b      	strb	r3, [r7, #9]
	data_t[2] = (uint8_t) data_l | 0x0C;  //en=1, rs=0
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	f043 030c 	orr.w	r3, r3, #12
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (uint8_t) data_l | 0x08;  //en=0, rs=0
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	72fb      	strb	r3, [r7, #11]

	I2C_MasterSendData(&hi2c2, (uint8_t*) data_t, 4, SLAVE_ADDRESS_LCD, 0);
 8000da4:	f107 0108 	add.w	r1, r7, #8
 8000da8:	2300      	movs	r3, #0
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2327      	movs	r3, #39	; 0x27
 8000dae:	2204      	movs	r2, #4
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <lcd_send_cmd+0x5c>)
 8000db2:	f000 fd8f 	bl	80018d4 <I2C_MasterSendData>

}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200000e0 	.word	0x200000e0

08000dc4 <lcd_send_data>:

void lcd_send_data(char data)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af02      	add	r7, sp, #8
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f023 030f 	bic.w	r3, r3, #15
 8000dd4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xf0);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	73bb      	strb	r3, [r7, #14]
	data_t[0] = (uint8_t) data_u | 0x0D;  //en=1, rs=0
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	f043 030d 	orr.w	r3, r3, #13
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	723b      	strb	r3, [r7, #8]
	data_t[1] = (uint8_t) data_u | 0x09;  //en=0, rs=0
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	f043 0309 	orr.w	r3, r3, #9
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	727b      	strb	r3, [r7, #9]
	data_t[2] = (uint8_t) data_l | 0x0D;  //en=1, rs=0
 8000df0:	7bbb      	ldrb	r3, [r7, #14]
 8000df2:	f043 030d 	orr.w	r3, r3, #13
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = (uint8_t) data_l | 0x09;  //en=0, rs=0
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	f043 0309 	orr.w	r3, r3, #9
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	72fb      	strb	r3, [r7, #11]
	I2C_MasterSendData(&hi2c2, (uint8_t*) data_t, 4, SLAVE_ADDRESS_LCD, 0);
 8000e04:	f107 0108 	add.w	r1, r7, #8
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2327      	movs	r3, #39	; 0x27
 8000e0e:	2204      	movs	r2, #4
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <lcd_send_data+0x5c>)
 8000e12:	f000 fd5f 	bl	80018d4 <I2C_MasterSendData>
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000e0 	.word	0x200000e0

08000e24 <lcd_put_cur>:
		lcd_send_data(' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
	row--;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
	col--;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	603b      	str	r3, [r7, #0]
	switch (row)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <lcd_put_cur+0x24>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d00a      	beq.n	8000e5c <lcd_put_cur+0x38>
 8000e46:	e013      	b.n	8000e70 <lcd_put_cur+0x4c>
	{
	case 0:
		lcd_send_cmd((col |= 0x80));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff85 	bl	8000d64 <lcd_send_cmd>
		break;
 8000e5a:	e009      	b.n	8000e70 <lcd_put_cur+0x4c>
	case 1:
		lcd_send_cmd((col |= 0xC0));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff7b 	bl	8000d64 <lcd_send_cmd>
		break;
 8000e6e:	bf00      	nop
	}
	mdelay(2);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f7ff ff5f 	bl	8000d34 <mdelay>

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <lcd_init_i2c>:

void lcd_init_i2c(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
	//1. Configure the gpio pins which are used for lcd connections

	GPIO_Handle_t lcd_signal_sda, lcd_signal_scl;

	memset(&lcd_signal_sda, 0, sizeof(lcd_signal_sda));
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fee8 	bl	8001c64 <memset>
	memset(&lcd_signal_scl, 0, sizeof(lcd_signal_scl));
 8000e94:	463b      	mov	r3, r7
 8000e96:	220c      	movs	r2, #12
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fee2 	bl	8001c64 <memset>
	/*
	 * I2C2_SCL ==> PB10
	 * I2C2_SDA ==> PB3
	 */

	lcd_signal_sda.pGPIOx = GPIOB;
 8000ea0:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <lcd_init_i2c+0xe0>)
 8000ea2:	60fb      	str	r3, [r7, #12]
	lcd_signal_sda.GPIO_PinConfig.GPIO_PinAltFunMode = 9;
 8000ea4:	2309      	movs	r3, #9
 8000ea6:	757b      	strb	r3, [r7, #21]
	lcd_signal_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	747b      	strb	r3, [r7, #17]
	lcd_signal_sda.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C2_SDA;
 8000eac:	2303      	movs	r3, #3
 8000eae:	743b      	strb	r3, [r7, #16]
	lcd_signal_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	753b      	strb	r3, [r7, #20]
	lcd_signal_sda.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	74fb      	strb	r3, [r7, #19]
	lcd_signal_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	74bb      	strb	r3, [r7, #18]

	GPIO_Init(&lcd_signal_sda);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f000 f915 	bl	80010f0 <GPIO_Init>

	lcd_signal_scl.pGPIOx = GPIOB;
 8000ec6:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <lcd_init_i2c+0xe0>)
 8000ec8:	603b      	str	r3, [r7, #0]
	lcd_signal_scl.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	727b      	strb	r3, [r7, #9]
	lcd_signal_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	717b      	strb	r3, [r7, #5]
	lcd_signal_scl.GPIO_PinConfig.GPIO_PinNumber = LCD_I2C2_SCL;
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	713b      	strb	r3, [r7, #4]
	lcd_signal_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	723b      	strb	r3, [r7, #8]
	lcd_signal_scl.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000eda:	2301      	movs	r3, #1
 8000edc:	71fb      	strb	r3, [r7, #7]
	lcd_signal_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(&lcd_signal_scl);
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f903 	bl	80010f0 <GPIO_Init>

	hi2c2.pI2Cx = LCD_I2C2;
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <lcd_init_i2c+0xe4>)
 8000eec:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <lcd_init_i2c+0xe8>)
 8000eee:	601a      	str	r2, [r3, #0]
	hi2c2.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <lcd_init_i2c+0xe4>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	725a      	strb	r2, [r3, #9]
	hi2c2.I2C_Config.I2C_SCLSpeed = LCD_I2C_SPEED;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <lcd_init_i2c+0xe4>)
 8000ef8:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <lcd_init_i2c+0xec>)
 8000efa:	605a      	str	r2, [r3, #4]
	I2C_Init(&hi2c2);
 8000efc:	4819      	ldr	r0, [pc, #100]	; (8000f64 <lcd_init_i2c+0xe4>)
 8000efe:	f000 fc37 	bl	8001770 <I2C_Init>

	//3. Enable the I2C peripheral
	I2C_PeripheralControl(LCD_I2C2, ENABLE);
 8000f02:	2101      	movs	r1, #1
 8000f04:	4818      	ldr	r0, [pc, #96]	; (8000f68 <lcd_init_i2c+0xe8>)
 8000f06:	f000 fdda 	bl	8001abe <I2C_PeripheralControl>

	// 4 bit initialisation
	mdelay(50);  // wait for >40ms
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f7ff ff12 	bl	8000d34 <mdelay>
	lcd_send_cmd(0x30);
 8000f10:	2030      	movs	r0, #48	; 0x30
 8000f12:	f7ff ff27 	bl	8000d64 <lcd_send_cmd>
	mdelay(5);  // wait for >4.1ms
 8000f16:	2005      	movs	r0, #5
 8000f18:	f7ff ff0c 	bl	8000d34 <mdelay>
	lcd_send_cmd(0x30);
 8000f1c:	2030      	movs	r0, #48	; 0x30
 8000f1e:	f7ff ff21 	bl	8000d64 <lcd_send_cmd>
	mdelay(1);  // wait for >100us
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff ff06 	bl	8000d34 <mdelay>
	lcd_send_cmd(0x30);
 8000f28:	2030      	movs	r0, #48	; 0x30
 8000f2a:	f7ff ff1b 	bl	8000d64 <lcd_send_cmd>
	mdelay(10);
 8000f2e:	200a      	movs	r0, #10
 8000f30:	f7ff ff00 	bl	8000d34 <mdelay>
	lcd_send_cmd(0x20);  // 4bit mode
 8000f34:	2020      	movs	r0, #32
 8000f36:	f7ff ff15 	bl	8000d64 <lcd_send_cmd>
	mdelay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f7ff fefa 	bl	8000d34 <mdelay>

	// dislay initialisation

	//function set command
	lcd_send_cmd(LCD_CMD_4DL_2N_5X8F);
 8000f40:	2028      	movs	r0, #40	; 0x28
 8000f42:	f7ff ff0f 	bl	8000d64 <lcd_send_cmd>

	//disply ON and cursor ON
	lcd_send_cmd(LCD_CMD_DON_CURON);
 8000f46:	200e      	movs	r0, #14
 8000f48:	f7ff ff0c 	bl	8000d64 <lcd_send_cmd>
//	lcd_send_cmd(0x08);

	lcd_send_cmd(LCD_CMD_DIS_CLEAR);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f7ff ff09 	bl	8000d64 <lcd_send_cmd>

	//entry mode set--> I/D = 1 (increment cursor) & S = 0 (no shift)
	lcd_send_cmd(LCD_CMD_INCADD);
 8000f52:	2006      	movs	r0, #6
 8000f54:	f7ff ff06 	bl	8000d64 <lcd_send_cmd>

	//Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
//	lcd_send_cmd(0x0C);

}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40020400 	.word	0x40020400
 8000f64:	200000e0 	.word	0x200000e0
 8000f68:	40005800 	.word	0x40005800
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	while (*str)
 8000f78:	e006      	b.n	8000f88 <lcd_send_string+0x18>
		lcd_send_data(*str++);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff1e 	bl	8000dc4 <lcd_send_data>
	while (*str)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f4      	bne.n	8000f7a <lcd_send_string+0xa>
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lcd_display_return_home_i2c>:

void lcd_display_return_home_i2c(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0

	lcd_send_cmd(LCD_CMD_DIS_RETURN_HOME);
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f7ff fee0 	bl	8000d64 <lcd_send_cmd>
	/*
	 * check page number 24 of datasheet.
	 * return home command execution wait time is around 2ms
	 */
	mdelay(2);
 8000fa4:	2002      	movs	r0, #2
 8000fa6:	f7ff fec5 	bl	8000d34 <mdelay>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx, uint8_t EnorDi)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d141      	bne.n	8001046 <GPIO_PeriClockControl+0x96>
	{
		if (pGPIOx == GPIOA)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a43      	ldr	r2, [pc, #268]	; (80010d4 <GPIO_PeriClockControl+0x124>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d106      	bne.n	8000fd8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000fca:	4b43      	ldr	r3, [pc, #268]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a42      	ldr	r2, [pc, #264]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000fd6:	e077      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a40      	ldr	r2, [pc, #256]	; (80010dc <GPIO_PeriClockControl+0x12c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d106      	bne.n	8000fee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000fe0:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8000fe6:	f043 0302 	orr.w	r3, r3, #2
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fec:	e06c      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a3b      	ldr	r2, [pc, #236]	; (80010e0 <GPIO_PeriClockControl+0x130>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d106      	bne.n	8001004 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a37      	ldr	r2, [pc, #220]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001002:	e061      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a37      	ldr	r2, [pc, #220]	; (80010e4 <GPIO_PeriClockControl+0x134>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d106      	bne.n	800101a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001018:	e056      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <GPIO_PeriClockControl+0x138>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d106      	bne.n	8001030 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001028:	f043 0310 	orr.w	r3, r3, #16
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800102e:	e04b      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a2e      	ldr	r2, [pc, #184]	; (80010ec <GPIO_PeriClockControl+0x13c>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d147      	bne.n	80010c8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 800103e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001044:	e040      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		if (pGPIOx == GPIOA)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GPIO_PeriClockControl+0x124>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d106      	bne.n	800105c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
}
 800105a:	e035      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOB)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GPIO_PeriClockControl+0x12c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d106      	bne.n	8001072 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	4a1b      	ldr	r2, [pc, #108]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001070:	e02a      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOC)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GPIO_PeriClockControl+0x130>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d106      	bne.n	8001088 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001080:	f023 0304 	bic.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001086:	e01f      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOD)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GPIO_PeriClockControl+0x134>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d106      	bne.n	800109e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 8001096:	f023 0308 	bic.w	r3, r3, #8
 800109a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800109c:	e014      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GPIO_PeriClockControl+0x138>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d106      	bne.n	80010b4 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 80010a6:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 80010ac:	f023 0310 	bic.w	r3, r3, #16
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010b2:	e009      	b.n	80010c8 <GPIO_PeriClockControl+0x118>
		else if (pGPIOx == GPIOH)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <GPIO_PeriClockControl+0x13c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d105      	bne.n	80010c8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <GPIO_PeriClockControl+0x128>)
 80010c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40021c00 	.word	0x40021c00

080010f0 <GPIO_Init>:
 * @Note              -  none

 */

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	uint32_t temp =0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff54 	bl	8000fb0 <GPIO_PeriClockControl>
	//1 . configure the mode of gpio pin
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	795b      	ldrb	r3, [r3, #5]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d820      	bhi.n	8001152 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	795b      	ldrb	r3, [r3, #5]
 8001114:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8001120:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	791b      	ldrb	r3, [r3, #4]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2103      	movs	r1, #3
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	4619      	mov	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	400a      	ands	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;			//setting
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e0a1      	b.n	8001296 <GPIO_Init+0x1a6>

	}
	else
	{
		// ( interrupt mode)
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	795b      	ldrb	r3, [r3, #5]
 8001156:	2b04      	cmp	r3, #4
 8001158:	d117      	bne.n	800118a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800115a:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <GPIO_Init+0x2e8>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	7912      	ldrb	r2, [r2, #4]
 8001162:	4611      	mov	r1, r2
 8001164:	2201      	movs	r2, #1
 8001166:	408a      	lsls	r2, r1
 8001168:	4611      	mov	r1, r2
 800116a:	4a9b      	ldr	r2, [pc, #620]	; (80013d8 <GPIO_Init+0x2e8>)
 800116c:	430b      	orrs	r3, r1
 800116e:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001170:	4b99      	ldr	r3, [pc, #612]	; (80013d8 <GPIO_Init+0x2e8>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	7912      	ldrb	r2, [r2, #4]
 8001178:	4611      	mov	r1, r2
 800117a:	2201      	movs	r2, #1
 800117c:	408a      	lsls	r2, r1
 800117e:	43d2      	mvns	r2, r2
 8001180:	4611      	mov	r1, r2
 8001182:	4a95      	ldr	r2, [pc, #596]	; (80013d8 <GPIO_Init+0x2e8>)
 8001184:	400b      	ands	r3, r1
 8001186:	6093      	str	r3, [r2, #8]
 8001188:	e035      	b.n	80011f6 <GPIO_Init+0x106>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	795b      	ldrb	r3, [r3, #5]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d117      	bne.n	80011c2 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001192:	4b91      	ldr	r3, [pc, #580]	; (80013d8 <GPIO_Init+0x2e8>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	7912      	ldrb	r2, [r2, #4]
 800119a:	4611      	mov	r1, r2
 800119c:	2201      	movs	r2, #1
 800119e:	408a      	lsls	r2, r1
 80011a0:	4611      	mov	r1, r2
 80011a2:	4a8d      	ldr	r2, [pc, #564]	; (80013d8 <GPIO_Init+0x2e8>)
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011a8:	4b8b      	ldr	r3, [pc, #556]	; (80013d8 <GPIO_Init+0x2e8>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	7912      	ldrb	r2, [r2, #4]
 80011b0:	4611      	mov	r1, r2
 80011b2:	2201      	movs	r2, #1
 80011b4:	408a      	lsls	r2, r1
 80011b6:	43d2      	mvns	r2, r2
 80011b8:	4611      	mov	r1, r2
 80011ba:	4a87      	ldr	r2, [pc, #540]	; (80013d8 <GPIO_Init+0x2e8>)
 80011bc:	400b      	ands	r3, r1
 80011be:	60d3      	str	r3, [r2, #12]
 80011c0:	e019      	b.n	80011f6 <GPIO_Init+0x106>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	795b      	ldrb	r3, [r3, #5]
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d115      	bne.n	80011f6 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011ca:	4b83      	ldr	r3, [pc, #524]	; (80013d8 <GPIO_Init+0x2e8>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	7912      	ldrb	r2, [r2, #4]
 80011d2:	4611      	mov	r1, r2
 80011d4:	2201      	movs	r2, #1
 80011d6:	408a      	lsls	r2, r1
 80011d8:	4611      	mov	r1, r2
 80011da:	4a7f      	ldr	r2, [pc, #508]	; (80013d8 <GPIO_Init+0x2e8>)
 80011dc:	430b      	orrs	r3, r1
 80011de:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80011e0:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <GPIO_Init+0x2e8>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	7912      	ldrb	r2, [r2, #4]
 80011e8:	4611      	mov	r1, r2
 80011ea:	2201      	movs	r2, #1
 80011ec:	408a      	lsls	r2, r1
 80011ee:	4611      	mov	r1, r2
 80011f0:	4a79      	ldr	r2, [pc, #484]	; (80013d8 <GPIO_Init+0x2e8>)
 80011f2:	430b      	orrs	r3, r1
 80011f4:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	791b      	ldrb	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a73      	ldr	r2, [pc, #460]	; (80013dc <GPIO_Init+0x2ec>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d024      	beq.n	800125c <GPIO_Init+0x16c>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <GPIO_Init+0x2f0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d01d      	beq.n	8001258 <GPIO_Init+0x168>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a70      	ldr	r2, [pc, #448]	; (80013e4 <GPIO_Init+0x2f4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d016      	beq.n	8001254 <GPIO_Init+0x164>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6f      	ldr	r2, [pc, #444]	; (80013e8 <GPIO_Init+0x2f8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d00f      	beq.n	8001250 <GPIO_Init+0x160>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6d      	ldr	r2, [pc, #436]	; (80013ec <GPIO_Init+0x2fc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d008      	beq.n	800124c <GPIO_Init+0x15c>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a6c      	ldr	r2, [pc, #432]	; (80013f0 <GPIO_Init+0x300>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d101      	bne.n	8001248 <GPIO_Init+0x158>
 8001244:	2307      	movs	r3, #7
 8001246:	e00a      	b.n	800125e <GPIO_Init+0x16e>
 8001248:	2300      	movs	r3, #0
 800124a:	e008      	b.n	800125e <GPIO_Init+0x16e>
 800124c:	2304      	movs	r3, #4
 800124e:	e006      	b.n	800125e <GPIO_Init+0x16e>
 8001250:	2303      	movs	r3, #3
 8001252:	e004      	b.n	800125e <GPIO_Init+0x16e>
 8001254:	2302      	movs	r3, #2
 8001256:	e002      	b.n	800125e <GPIO_Init+0x16e>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <GPIO_Init+0x16e>
 800125c:	2300      	movs	r3, #0
 800125e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8001260:	4b64      	ldr	r3, [pc, #400]	; (80013f4 <GPIO_Init+0x304>)
 8001262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001264:	4a63      	ldr	r2, [pc, #396]	; (80013f4 <GPIO_Init+0x304>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800126c:	7c7a      	ldrb	r2, [r7, #17]
 800126e:	7cbb      	ldrb	r3, [r7, #18]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f103 	lsl.w	r1, r2, r3
 8001276:	4a60      	ldr	r2, [pc, #384]	; (80013f8 <GPIO_Init+0x308>)
 8001278:	7cfb      	ldrb	r3, [r7, #19]
 800127a:	3302      	adds	r3, #2
 800127c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <GPIO_Init+0x2e8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	7912      	ldrb	r2, [r2, #4]
 8001288:	4611      	mov	r1, r2
 800128a:	2201      	movs	r2, #1
 800128c:	408a      	lsls	r2, r1
 800128e:	4611      	mov	r1, r2
 8001290:	4a51      	ldr	r2, [pc, #324]	; (80013d8 <GPIO_Init+0x2e8>)
 8001292:	430b      	orrs	r3, r1
 8001294:	6013      	str	r3, [r2, #0]

	}
	//2. configure the speed
	temp = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	799b      	ldrb	r3, [r3, #6]
 800129e:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	791b      	ldrb	r3, [r3, #4]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80012aa:	617b      	str	r3, [r7, #20]
	pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed &= ~(0x3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	799b      	ldrb	r3, [r3, #6]
 80012b0:	b25a      	sxtb	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	791b      	ldrb	r3, [r3, #4]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2103      	movs	r1, #3
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed &= ~(0x3
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	b25b      	sxtb	r3, r3
 80012c4:	4013      	ands	r3, r2
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	719a      	strb	r2, [r3, #6]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6899      	ldr	r1, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	430a      	orrs	r2, r1
 80012dc:	609a      	str	r2, [r3, #8]

	temp = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	79db      	ldrb	r3, [r3, #7]
 80012e6:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	791b      	ldrb	r3, [r3, #4]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80012f2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	791b      	ldrb	r3, [r3, #4]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2103      	movs	r1, #3
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8001306:	43db      	mvns	r3, r3
 8001308:	4619      	mov	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	400a      	ands	r2, r1
 8001310:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68d9      	ldr	r1, [r3, #12]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]

	temp = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7a1b      	ldrb	r3, [r3, #8]
 800132a:	461a      	mov	r2, r3
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 8001334:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	4619      	mov	r1, r3
 8001342:	2301      	movs	r3, #1
 8001344:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8001346:	43db      	mvns	r3, r3
 8001348:	4619      	mov	r1, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	400a      	ands	r2, r1
 8001350:	605a      	str	r2, [r3, #4]

	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6859      	ldr	r1, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	795b      	ldrb	r3, [r3, #5]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d132      	bne.n	80013d0 <GPIO_Init+0x2e0>
	{
		//configure the alt function registers.
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	08db      	lsrs	r3, r3, #3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	791b      	ldrb	r3, [r3, #4]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFRL[temp1] &= ~(0xF << (4 * temp2)); //clearing
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	3208      	adds	r2, #8
 8001386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	210f      	movs	r1, #15
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4011      	ands	r1, r2
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	3208      	adds	r2, #8
 80013a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	3208      	adds	r2, #8
 80013ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7a5b      	ldrb	r3, [r3, #9]
 80013b6:	4619      	mov	r1, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	4619      	mov	r1, r3
		pGPIOHandle->pGPIOx->AFRL[temp1] |=
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4311      	orrs	r1, r2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	3208      	adds	r2, #8
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013c00 	.word	0x40013c00
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020c00 	.word	0x40020c00
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40021c00 	.word	0x40021c00
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800

080013fc <GPIO_ToggleOutputPin>:
 *
 * @Note              -

 */
void GPIO_ToggleOutputPin(GPIO_Regdef_t *pGPIOx, uint8_t PinNumber)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	78fa      	ldrb	r2, [r7, #3]
 800140e:	2101      	movs	r1, #1
 8001410:	fa01 f202 	lsl.w	r2, r1, r2
 8001414:	405a      	eors	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	615a      	str	r2, [r3, #20]
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	460a      	mov	r2, r1
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	4613      	mov	r3, r2
 8001432:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 8001434:	79bb      	ldrb	r3, [r7, #6]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d133      	bne.n	80014a2 <GPIO_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber <= 31)
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b1f      	cmp	r3, #31
 800143e:	d80a      	bhi.n	8001456 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <GPIO_IRQInterruptConfig+0xf0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	4611      	mov	r1, r2
 800144e:	4a31      	ldr	r2, [pc, #196]	; (8001514 <GPIO_IRQInterruptConfig+0xf0>)
 8001450:	430b      	orrs	r3, r1
 8001452:	6013      	str	r3, [r2, #0]
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8001454:	e059      	b.n	800150a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64) //32 to 63
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b1f      	cmp	r3, #31
 800145a:	d90f      	bls.n	800147c <GPIO_IRQInterruptConfig+0x58>
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b3f      	cmp	r3, #63	; 0x3f
 8001460:	d80c      	bhi.n	800147c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <GPIO_IRQInterruptConfig+0xf4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	79fa      	ldrb	r2, [r7, #7]
 8001468:	f002 021f 	and.w	r2, r2, #31
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f202 	lsl.w	r2, r1, r2
 8001472:	4611      	mov	r1, r2
 8001474:	4a28      	ldr	r2, [pc, #160]	; (8001518 <GPIO_IRQInterruptConfig+0xf4>)
 8001476:	430b      	orrs	r3, r1
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e046      	b.n	800150a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b3f      	cmp	r3, #63	; 0x3f
 8001480:	d943      	bls.n	800150a <GPIO_IRQInterruptConfig+0xe6>
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b5f      	cmp	r3, #95	; 0x5f
 8001486:	d840      	bhi.n	800150a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001488:	4b24      	ldr	r3, [pc, #144]	; (800151c <GPIO_IRQInterruptConfig+0xf8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001492:	2101      	movs	r1, #1
 8001494:	fa01 f202 	lsl.w	r2, r1, r2
 8001498:	4611      	mov	r1, r2
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <GPIO_IRQInterruptConfig+0xf8>)
 800149c:	430b      	orrs	r3, r1
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	e033      	b.n	800150a <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31)
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b1f      	cmp	r3, #31
 80014a6:	d80a      	bhi.n	80014be <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <GPIO_IRQInterruptConfig+0xfc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <GPIO_IRQInterruptConfig+0xfc>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	e025      	b.n	800150a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber > 31 && IRQNumber < 64)
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b1f      	cmp	r3, #31
 80014c2:	d90f      	bls.n	80014e4 <GPIO_IRQInterruptConfig+0xc0>
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	2b3f      	cmp	r3, #63	; 0x3f
 80014c8:	d80c      	bhi.n	80014e4 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80014ca:	4b16      	ldr	r3, [pc, #88]	; (8001524 <GPIO_IRQInterruptConfig+0x100>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	79fa      	ldrb	r2, [r7, #7]
 80014d0:	f002 021f 	and.w	r2, r2, #31
 80014d4:	2101      	movs	r1, #1
 80014d6:	fa01 f202 	lsl.w	r2, r1, r2
 80014da:	4611      	mov	r1, r2
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <GPIO_IRQInterruptConfig+0x100>)
 80014de:	430b      	orrs	r3, r1
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e012      	b.n	800150a <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96)
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b3f      	cmp	r3, #63	; 0x3f
 80014e8:	d90f      	bls.n	800150a <GPIO_IRQInterruptConfig+0xe6>
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b5f      	cmp	r3, #95	; 0x5f
 80014ee:	d80c      	bhi.n	800150a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <GPIO_IRQInterruptConfig+0x104>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014fa:	2101      	movs	r1, #1
 80014fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001500:	4611      	mov	r1, r2
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <GPIO_IRQInterruptConfig+0x104>)
 8001504:	430b      	orrs	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	e7ff      	b.n	800150a <GPIO_IRQInterruptConfig+0xe6>
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100
 8001518:	e000e104 	.word	0xe000e104
 800151c:	e000e108 	.word	0xe000e108
 8001520:	e000e180 	.word	0xe000e180
 8001524:	e000e184 	.word	0xe000e184
 8001528:	e000e188 	.word	0xe000e188

0800152c <GPIO_IRQPriorityConfig>:
//reference in generic user guide arm cortex m4
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	3304      	adds	r3, #4
 800154e:	737b      	strb	r3, [r7, #13]

	*( NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001558:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800155c:	6819      	ldr	r1, [r3, #0]
 800155e:	7b7b      	ldrb	r3, [r7, #13]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	409a      	lsls	r2, r3
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800156c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <GPIO_IRQHandling>:
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber))
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <GPIO_IRQHandling+0x3c>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	79fa      	ldrb	r2, [r7, #7]
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= (1 << PinNumber);
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <GPIO_IRQHandling+0x3c>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	79fa      	ldrb	r2, [r7, #7]
 80015a2:	2101      	movs	r1, #1
 80015a4:	fa01 f202 	lsl.w	r2, r1, r2
 80015a8:	4611      	mov	r1, r2
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <GPIO_IRQHandling+0x3c>)
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6153      	str	r3, [r2, #20]
	}
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle);
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	601a      	str	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr

080015de <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx) {
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]

}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL)) {
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d01f      	beq.n	8001652 <I2C_ClearADDRFlag+0x56>
		//device is in master mode
		if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7f1b      	ldrb	r3, [r3, #28]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d112      	bne.n	8001640 <I2C_ClearADDRFlag+0x44>
			if (pI2CHandle->RxSize == 1) {
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d11f      	bne.n	8001662 <I2C_ClearADDRFlag+0x66>
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f000 fa76 	bl	8001b1a <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR1;
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void) dummy_read;
	}

}
 800163e:	e010      	b.n	8001662 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	60fb      	str	r3, [r7, #12]
}
 8001650:	e007      	b.n	8001662 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	60fb      	str	r3, [r7, #12]
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	460b      	mov	r3, r1
 8001674:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8001676:	78fb      	ldrb	r3, [r7, #3]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <I2C_ExecuteAddressPhaseRead>:
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr) {
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= 1; //SlaveAddr is Slave address + r/nw bit=1
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	611a      	str	r2, [r3, #16]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
	...

080016c0 <I2C_PeriClockControl>:
}

/*
 * Peripheral Clock setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d120      	bne.n	8001714 <I2C_PeriClockControl+0x54>
		if (pI2Cx == I2C1) {
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a22      	ldr	r2, [pc, #136]	; (8001760 <I2C_PeriClockControl+0xa0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d106      	bne.n	80016e8 <I2C_PeriClockControl+0x28>
			I2C1_PCLK_EN();
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <I2C_PeriClockControl+0xa4>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a21      	ldr	r2, [pc, #132]	; (8001764 <I2C_PeriClockControl+0xa4>)
 80016e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
			I2C2_PCLK_DI();
		} else if (pI2Cx == I2C3) {
			I2C3_PCLK_DI();
		}
	}
}
 80016e6:	e035      	b.n	8001754 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2) {
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <I2C_PeriClockControl+0xa8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d106      	bne.n	80016fe <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 80016f0:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <I2C_PeriClockControl+0xa4>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a1b      	ldr	r2, [pc, #108]	; (8001764 <I2C_PeriClockControl+0xa4>)
 80016f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80016fc:	e02a      	b.n	8001754 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3) {
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <I2C_PeriClockControl+0xac>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d126      	bne.n	8001754 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <I2C_PeriClockControl+0xa4>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a16      	ldr	r2, [pc, #88]	; (8001764 <I2C_PeriClockControl+0xa4>)
 800170c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001712:	e01f      	b.n	8001754 <I2C_PeriClockControl+0x94>
		if (pI2Cx == I2C1) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <I2C_PeriClockControl+0xa0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d106      	bne.n	800172a <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DI();
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <I2C_PeriClockControl+0xa4>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <I2C_PeriClockControl+0xa4>)
 8001722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001728:	e014      	b.n	8001754 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C2) {
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <I2C_PeriClockControl+0xa8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d106      	bne.n	8001740 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DI();
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <I2C_PeriClockControl+0xa4>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <I2C_PeriClockControl+0xa4>)
 8001738:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800173e:	e009      	b.n	8001754 <I2C_PeriClockControl+0x94>
		} else if (pI2Cx == I2C3) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <I2C_PeriClockControl+0xac>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d105      	bne.n	8001754 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DI();
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <I2C_PeriClockControl+0xa4>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <I2C_PeriClockControl+0xa4>)
 800174e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40005400 	.word	0x40005400
 8001764:	40023800 	.word	0x40023800
 8001768:	40005800 	.word	0x40005800
 800176c:	40005c00 	.word	0x40005c00

08001770 <I2C_Init>:

/*
 * Init and De-init
 */
void I2C_Init(I2C_Handle_t *pI2CHandle) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff9c 	bl	80016c0 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7a5b      	ldrb	r3, [r3, #9]
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 80017a2:	f000 f9d5 	bl	8001b50 <RCC_GetPCLK1Value>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a47      	ldr	r2, [pc, #284]	; (80018c8 <I2C_Init+0x158>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80017c0:	605a      	str	r2, [r3, #4]

	//program the device own address
	tempreg = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7a1b      	ldrb	r3, [r3, #8]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a36      	ldr	r2, [pc, #216]	; (80018cc <I2C_Init+0x15c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d80f      	bhi.n	8001816 <I2C_Init+0xa6>
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value()
 80017f6:	f000 f9ab 	bl	8001b50 <RCC_GetPCLK1Value>
 80017fa:	4602      	mov	r2, r0
				/ (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
		ccr_value = (RCC_GetPCLK1Value()
 8001806:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8001808:	897b      	ldrh	r3, [r7, #10]
 800180a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	e02d      	b.n	8001872 <I2C_Init+0x102>
	} else {
		//mode is fast mode
		tempreg |= (1 << 15);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	7a9b      	ldrb	r3, [r3, #10]
 8001822:	039b      	lsls	r3, r3, #14
 8001824:	461a      	mov	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	60fb      	str	r3, [r7, #12]
		if (pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2) {
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7a9b      	ldrb	r3, [r3, #10]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10b      	bne.n	800184c <I2C_Init+0xdc>
			ccr_value = (RCC_GetPCLK1Value()
 8001834:	f000 f98c 	bl	8001b50 <RCC_GetPCLK1Value>
 8001838:	4601      	mov	r1, r0
					/ (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	fbb1 f3f3 	udiv	r3, r1, r3
			ccr_value = (RCC_GetPCLK1Value()
 8001848:	817b      	strh	r3, [r7, #10]
 800184a:	e00c      	b.n	8001866 <I2C_Init+0xf6>
		} else {
			ccr_value = (RCC_GetPCLK1Value()
 800184c:	f000 f980 	bl	8001b50 <RCC_GetPCLK1Value>
 8001850:	4601      	mov	r1, r0
					/ (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	009a      	lsls	r2, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	fbb1 f3f3 	udiv	r3, r1, r3
			ccr_value = (RCC_GetPCLK1Value()
 8001864:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8001866:	897b      	ldrh	r3, [r7, #10]
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if (pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <I2C_Init+0x15c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d809      	bhi.n	8001898 <I2C_Init+0x128>
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8001884:	f000 f964 	bl	8001b50 <RCC_GetPCLK1Value>
 8001888:	4603      	mov	r3, r0
 800188a:	4a0f      	ldr	r2, [pc, #60]	; (80018c8 <I2C_Init+0x158>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	e00d      	b.n	80018b4 <I2C_Init+0x144>

	} else {
		//mode is fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8001898:	f000 f95a 	bl	8001b50 <RCC_GetPCLK1Value>
 800189c:	4603      	mov	r3, r0
 800189e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	0a5b      	lsrs	r3, r3, #9
 80018a8:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <I2C_Init+0x160>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	09db      	lsrs	r3, r3, #7
 80018b0:	3301      	adds	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80018be:	621a      	str	r2, [r3, #32]
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	000186a0 	.word	0x000186a0
 80018d0:	00044b83 	.word	0x00044b83

080018d4 <I2C_MasterSendData>:

/*
 * Data Send and Receive
 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer,
		uint32_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
 80018e0:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fe6a 	bl	80015c0 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB))
 80018ec:	bf00      	nop
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2101      	movs	r1, #1
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f8fd 	bl	8001af4 <I2C_GetFlagStatus>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f6      	beq.n	80018ee <I2C_MasterSendData+0x1a>
		;

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff feae 	bl	800166a <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR))
 800190e:	bf00      	nop
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2102      	movs	r1, #2
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f8ec 	bl	8001af4 <I2C_GetFlagStatus>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f6      	beq.n	8001910 <I2C_MasterSendData+0x3c>
		;

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff fe6a 	bl	80015fc <I2C_ClearADDRFlag>

	//6. send the data until length becomes 0

	while (Len > 0) {
 8001928:	e014      	b.n	8001954 <I2C_MasterSendData+0x80>
		while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE))
 800192a:	bf00      	nop
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f8de 	bl	8001af4 <I2C_GetFlagStatus>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f6      	beq.n	800192c <I2C_MasterSendData+0x58>
			; //Wait till TXE is set
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3301      	adds	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
		Len--;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
	while (Len > 0) {
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1e7      	bne.n	800192a <I2C_MasterSendData+0x56>

	//7. when Length becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE))
 800195a:	bf00      	nop
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f8c6 	bl	8001af4 <I2C_GetFlagStatus>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f6      	beq.n	800195c <I2C_MasterSendData+0x88>
		;

	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF))
 800196e:	bf00      	nop
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2104      	movs	r1, #4
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f8bc 	bl	8001af4 <I2C_GetFlagStatus>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0f6      	beq.n	8001970 <I2C_MasterSendData+0x9c>
		;

	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if (Sr == I2C_DISABLE_SR)
 8001982:	7e3b      	ldrb	r3, [r7, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d104      	bne.n	8001992 <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe26 	bl	80015de <I2C_GenerateStopCondition>
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <I2C_MasterReceiveData>:
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer,
		uint8_t Len, uint8_t SlaveAddr, uint8_t Sr) {
 800199a:	b580      	push	{r7, lr}
 800199c:	b086      	sub	sp, #24
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60f8      	str	r0, [r7, #12]
 80019a2:	60b9      	str	r1, [r7, #8]
 80019a4:	4611      	mov	r1, r2
 80019a6:	461a      	mov	r2, r3
 80019a8:	460b      	mov	r3, r1
 80019aa:	71fb      	strb	r3, [r7, #7]
 80019ac:	4613      	mov	r3, r2
 80019ae:	71bb      	strb	r3, [r7, #6]
	//1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe03 	bl	80015c0 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB))
 80019ba:	bf00      	nop
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f896 	bl	8001af4 <I2C_GetFlagStatus>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f6      	beq.n	80019bc <I2C_MasterReceiveData+0x22>
		;

	//3. Send the address of the slave with r/nw bit set to R(1) (total 8 bits )
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, SlaveAddr);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	79ba      	ldrb	r2, [r7, #6]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fe5c 	bl	8001694 <I2C_ExecuteAddressPhaseRead>

	//4. wait until address phase is completed by checking the ADDR flag in teh SR1
	while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR))
 80019dc:	bf00      	nop
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2102      	movs	r1, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f885 	bl	8001af4 <I2C_GetFlagStatus>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f6      	beq.n	80019de <I2C_MasterReceiveData+0x44>
		;

	//procedure to read only 1 byte from slave
	if (Len == 1) {
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d121      	bne.n	8001a3a <I2C_MasterReceiveData+0xa0>
		//Disable Acking
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f88c 	bl	8001b1a <I2C_ManageAcking>

		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff fdfa 	bl	80015fc <I2C_ClearADDRFlag>

		//wait until  RXNE becomes 1
		while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE))
 8001a08:	bf00      	nop
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f86f 	bl	8001af4 <I2C_GetFlagStatus>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f6      	beq.n	8001a0a <I2C_MasterReceiveData+0x70>
			;

		//generate STOP condition
		if (Sr == I2C_DISABLE_SR)
 8001a1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d104      	bne.n	8001a2e <I2C_MasterReceiveData+0x94>
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fdd8 	bl	80015de <I2C_GenerateStopCondition>

		//read data in to buffer
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	701a      	strb	r2, [r3, #0]

	}

	//procedure to read data from slave when Len > 1
	if (Len > 1) {
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d930      	bls.n	8001aa2 <I2C_MasterReceiveData+0x108>
		//clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001a40:	68f8      	ldr	r0, [r7, #12]
 8001a42:	f7ff fddb 	bl	80015fc <I2C_ClearADDRFlag>

		//read the data until Len becomes zero
		for (uint32_t i = Len; i > 0; i--) {
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e027      	b.n	8001a9c <I2C_MasterReceiveData+0x102>
			//wait until RXNE becomes 1
			while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_RXNE))
 8001a4c:	bf00      	nop
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2140      	movs	r1, #64	; 0x40
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f84d 	bl	8001af4 <I2C_GetFlagStatus>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f6      	beq.n	8001a4e <I2C_MasterReceiveData+0xb4>
				;

			if (i == 2) //if last 2 bytes are remaining
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d10e      	bne.n	8001a84 <I2C_MasterReceiveData+0xea>
					{
				//Disable Acking
				I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_DISABLE);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f854 	bl	8001b1a <I2C_ManageAcking>

				//generate STOP condition
				if (Sr == I2C_DISABLE_SR)
 8001a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d104      	bne.n	8001a84 <I2C_MasterReceiveData+0xea>
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fdad 	bl	80015de <I2C_GenerateStopCondition>

			}

			//read the data from data register in to buffer
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	701a      	strb	r2, [r3, #0]

			//increment the buffer address
			pRxBuffer++;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	3301      	adds	r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
		for (uint32_t i = Len; i > 0; i--) {
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1d4      	bne.n	8001a4c <I2C_MasterReceiveData+0xb2>
		}

	}

	//re-enable ACKing
	if (pI2CHandle->I2C_Config.I2C_AckControl == I2C_ACK_ENABLE) {
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	7a5b      	ldrb	r3, [r3, #9]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <I2C_MasterReceiveData+0x11c>
		I2C_ManageAcking(pI2CHandle->pI2Cx, I2C_ACK_ENABLE);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2101      	movs	r1, #1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f832 	bl	8001b1a <I2C_ManageAcking>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <I2C_PeripheralControl>:
}

/*
 * Other Peripheral Control APIs
 */
void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi) {
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <I2C_PeripheralControl+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	601a      	str	r2, [r3, #0]
		//pI2cBaseAddress->CR1 |= I2C_CR1_PE_Bit_Mask;
	} else {
		pI2Cx->CR1 &= ~(1 << 0);
	}
}
 8001adc:	e005      	b.n	8001aea <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0201 	bic.w	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <I2C_GetFlagStatus>:
uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	if (pI2Cx->SR1 & FlagName) {
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_GetFlagStatus+0x1a>
		return FLAG_SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <I2C_ManageAcking>:
void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi) {
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == I2C_ACK_ENABLE) {
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d106      	bne.n	8001b3a <I2C_ManageAcking+0x20>
		//enable the ack
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	601a      	str	r2, [r3, #0]
	} else {
		//disable the ack
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8001b38:	e005      	b.n	8001b46 <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <RCC_GetPCLK1Value>:
#include "stm32f411xx_rcc_driver.h"

uint16_t AHB_PreScaler[8] = { 2, 4, 8, 16, 64, 128, 256, 512 };
uint8_t APB1_PreScaler[4] = { 2, 4, 8, 16 };

uint32_t RCC_GetPCLK1Value(void) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <RCC_GetPCLK1Value+0x9c>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	727b      	strb	r3, [r7, #9]

	if (clksrc == 0) {
 8001b64:	7a7b      	ldrb	r3, [r7, #9]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <RCC_GetPCLK1Value+0xa0>)
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e00b      	b.n	8001b88 <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 1) {
 8001b70:	7a7b      	ldrb	r3, [r7, #9]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d102      	bne.n	8001b7c <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <RCC_GetPCLK1Value+0xa4>)
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	e005      	b.n	8001b88 <RCC_GetPCLK1Value+0x38>
	} else if (clksrc == 2) {
 8001b7c:	7a7b      	ldrb	r3, [r7, #9]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d102      	bne.n	8001b88 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 8001b82:	f000 f83d 	bl	8001c00 <RCC_GetPLLOutputClock>
 8001b86:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001b88:	4b18      	ldr	r3, [pc, #96]	; (8001bec <RCC_GetPCLK1Value+0x9c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	091b      	lsrs	r3, r3, #4
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	723b      	strb	r3, [r7, #8]

	if (temp < 8) {
 8001b96:	7a3b      	ldrb	r3, [r7, #8]
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	d802      	bhi.n	8001ba2 <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	72fb      	strb	r3, [r7, #11]
 8001ba0:	e005      	b.n	8001bae <RCC_GetPCLK1Value+0x5e>
	} else {
		ahbp = AHB_PreScaler[temp - 8];
 8001ba2:	7a3b      	ldrb	r3, [r7, #8]
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <RCC_GetPCLK1Value+0xa8>)
 8001ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bac:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <RCC_GetPCLK1Value+0x9c>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	723b      	strb	r3, [r7, #8]

	if (temp < 4) {
 8001bbc:	7a3b      	ldrb	r3, [r7, #8]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d802      	bhi.n	8001bc8 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	72bb      	strb	r3, [r7, #10]
 8001bc6:	e004      	b.n	8001bd2 <RCC_GetPCLK1Value+0x82>
	} else {
		apb1p = APB1_PreScaler[temp - 4];
 8001bc8:	7a3b      	ldrb	r3, [r7, #8]
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <RCC_GetPCLK1Value+0xac>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bda:	7abb      	ldrb	r3, [r7, #10]
 8001bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be0:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001be2:	687b      	ldr	r3, [r7, #4]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	00f42400 	.word	0x00f42400
 8001bf4:	007a1200 	.word	0x007a1200
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000010 	.word	0x20000010

08001c00 <RCC_GetPLLOutputClock>:
	pclk2 = (SystemClock / ahbp) / apb2p;

	return pclk2;
}

uint32_t RCC_GetPLLOutputClock() {
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

	return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
	...

08001c10 <__errno>:
 8001c10:	4b01      	ldr	r3, [pc, #4]	; (8001c18 <__errno+0x8>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	20000014 	.word	0x20000014

08001c1c <__libc_init_array>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	4d0d      	ldr	r5, [pc, #52]	; (8001c54 <__libc_init_array+0x38>)
 8001c20:	4c0d      	ldr	r4, [pc, #52]	; (8001c58 <__libc_init_array+0x3c>)
 8001c22:	1b64      	subs	r4, r4, r5
 8001c24:	10a4      	asrs	r4, r4, #2
 8001c26:	2600      	movs	r6, #0
 8001c28:	42a6      	cmp	r6, r4
 8001c2a:	d109      	bne.n	8001c40 <__libc_init_array+0x24>
 8001c2c:	4d0b      	ldr	r5, [pc, #44]	; (8001c5c <__libc_init_array+0x40>)
 8001c2e:	4c0c      	ldr	r4, [pc, #48]	; (8001c60 <__libc_init_array+0x44>)
 8001c30:	f000 fce4 	bl	80025fc <_init>
 8001c34:	1b64      	subs	r4, r4, r5
 8001c36:	10a4      	asrs	r4, r4, #2
 8001c38:	2600      	movs	r6, #0
 8001c3a:	42a6      	cmp	r6, r4
 8001c3c:	d105      	bne.n	8001c4a <__libc_init_array+0x2e>
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c44:	4798      	blx	r3
 8001c46:	3601      	adds	r6, #1
 8001c48:	e7ee      	b.n	8001c28 <__libc_init_array+0xc>
 8001c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c4e:	4798      	blx	r3
 8001c50:	3601      	adds	r6, #1
 8001c52:	e7f2      	b.n	8001c3a <__libc_init_array+0x1e>
 8001c54:	080026d4 	.word	0x080026d4
 8001c58:	080026d4 	.word	0x080026d4
 8001c5c:	080026d4 	.word	0x080026d4
 8001c60:	080026d8 	.word	0x080026d8

08001c64 <memset>:
 8001c64:	4402      	add	r2, r0
 8001c66:	4603      	mov	r3, r0
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <memset+0xa>
 8001c6c:	4770      	bx	lr
 8001c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c72:	e7f9      	b.n	8001c68 <memset+0x4>

08001c74 <_puts_r>:
 8001c74:	b570      	push	{r4, r5, r6, lr}
 8001c76:	460e      	mov	r6, r1
 8001c78:	4605      	mov	r5, r0
 8001c7a:	b118      	cbz	r0, 8001c84 <_puts_r+0x10>
 8001c7c:	6983      	ldr	r3, [r0, #24]
 8001c7e:	b90b      	cbnz	r3, 8001c84 <_puts_r+0x10>
 8001c80:	f000 fa48 	bl	8002114 <__sinit>
 8001c84:	69ab      	ldr	r3, [r5, #24]
 8001c86:	68ac      	ldr	r4, [r5, #8]
 8001c88:	b913      	cbnz	r3, 8001c90 <_puts_r+0x1c>
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f000 fa42 	bl	8002114 <__sinit>
 8001c90:	4b2c      	ldr	r3, [pc, #176]	; (8001d44 <_puts_r+0xd0>)
 8001c92:	429c      	cmp	r4, r3
 8001c94:	d120      	bne.n	8001cd8 <_puts_r+0x64>
 8001c96:	686c      	ldr	r4, [r5, #4]
 8001c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001c9a:	07db      	lsls	r3, r3, #31
 8001c9c:	d405      	bmi.n	8001caa <_puts_r+0x36>
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	0598      	lsls	r0, r3, #22
 8001ca2:	d402      	bmi.n	8001caa <_puts_r+0x36>
 8001ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ca6:	f000 fad3 	bl	8002250 <__retarget_lock_acquire_recursive>
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	0719      	lsls	r1, r3, #28
 8001cae:	d51d      	bpl.n	8001cec <_puts_r+0x78>
 8001cb0:	6923      	ldr	r3, [r4, #16]
 8001cb2:	b1db      	cbz	r3, 8001cec <_puts_r+0x78>
 8001cb4:	3e01      	subs	r6, #1
 8001cb6:	68a3      	ldr	r3, [r4, #8]
 8001cb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	60a3      	str	r3, [r4, #8]
 8001cc0:	bb39      	cbnz	r1, 8001d12 <_puts_r+0x9e>
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da38      	bge.n	8001d38 <_puts_r+0xc4>
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	210a      	movs	r1, #10
 8001cca:	4628      	mov	r0, r5
 8001ccc:	f000 f848 	bl	8001d60 <__swbuf_r>
 8001cd0:	3001      	adds	r0, #1
 8001cd2:	d011      	beq.n	8001cf8 <_puts_r+0x84>
 8001cd4:	250a      	movs	r5, #10
 8001cd6:	e011      	b.n	8001cfc <_puts_r+0x88>
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <_puts_r+0xd4>)
 8001cda:	429c      	cmp	r4, r3
 8001cdc:	d101      	bne.n	8001ce2 <_puts_r+0x6e>
 8001cde:	68ac      	ldr	r4, [r5, #8]
 8001ce0:	e7da      	b.n	8001c98 <_puts_r+0x24>
 8001ce2:	4b1a      	ldr	r3, [pc, #104]	; (8001d4c <_puts_r+0xd8>)
 8001ce4:	429c      	cmp	r4, r3
 8001ce6:	bf08      	it	eq
 8001ce8:	68ec      	ldreq	r4, [r5, #12]
 8001cea:	e7d5      	b.n	8001c98 <_puts_r+0x24>
 8001cec:	4621      	mov	r1, r4
 8001cee:	4628      	mov	r0, r5
 8001cf0:	f000 f888 	bl	8001e04 <__swsetup_r>
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d0dd      	beq.n	8001cb4 <_puts_r+0x40>
 8001cf8:	f04f 35ff 	mov.w	r5, #4294967295
 8001cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001cfe:	07da      	lsls	r2, r3, #31
 8001d00:	d405      	bmi.n	8001d0e <_puts_r+0x9a>
 8001d02:	89a3      	ldrh	r3, [r4, #12]
 8001d04:	059b      	lsls	r3, r3, #22
 8001d06:	d402      	bmi.n	8001d0e <_puts_r+0x9a>
 8001d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d0a:	f000 faa2 	bl	8002252 <__retarget_lock_release_recursive>
 8001d0e:	4628      	mov	r0, r5
 8001d10:	bd70      	pop	{r4, r5, r6, pc}
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da04      	bge.n	8001d20 <_puts_r+0xac>
 8001d16:	69a2      	ldr	r2, [r4, #24]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dc06      	bgt.n	8001d2a <_puts_r+0xb6>
 8001d1c:	290a      	cmp	r1, #10
 8001d1e:	d004      	beq.n	8001d2a <_puts_r+0xb6>
 8001d20:	6823      	ldr	r3, [r4, #0]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	6022      	str	r2, [r4, #0]
 8001d26:	7019      	strb	r1, [r3, #0]
 8001d28:	e7c5      	b.n	8001cb6 <_puts_r+0x42>
 8001d2a:	4622      	mov	r2, r4
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f000 f817 	bl	8001d60 <__swbuf_r>
 8001d32:	3001      	adds	r0, #1
 8001d34:	d1bf      	bne.n	8001cb6 <_puts_r+0x42>
 8001d36:	e7df      	b.n	8001cf8 <_puts_r+0x84>
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	250a      	movs	r5, #10
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	6022      	str	r2, [r4, #0]
 8001d40:	701d      	strb	r5, [r3, #0]
 8001d42:	e7db      	b.n	8001cfc <_puts_r+0x88>
 8001d44:	08002694 	.word	0x08002694
 8001d48:	080026b4 	.word	0x080026b4
 8001d4c:	08002674 	.word	0x08002674

08001d50 <puts>:
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <puts+0xc>)
 8001d52:	4601      	mov	r1, r0
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	f7ff bf8d 	b.w	8001c74 <_puts_r>
 8001d5a:	bf00      	nop
 8001d5c:	20000014 	.word	0x20000014

08001d60 <__swbuf_r>:
 8001d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d62:	460e      	mov	r6, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	4605      	mov	r5, r0
 8001d68:	b118      	cbz	r0, 8001d72 <__swbuf_r+0x12>
 8001d6a:	6983      	ldr	r3, [r0, #24]
 8001d6c:	b90b      	cbnz	r3, 8001d72 <__swbuf_r+0x12>
 8001d6e:	f000 f9d1 	bl	8002114 <__sinit>
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <__swbuf_r+0x98>)
 8001d74:	429c      	cmp	r4, r3
 8001d76:	d12b      	bne.n	8001dd0 <__swbuf_r+0x70>
 8001d78:	686c      	ldr	r4, [r5, #4]
 8001d7a:	69a3      	ldr	r3, [r4, #24]
 8001d7c:	60a3      	str	r3, [r4, #8]
 8001d7e:	89a3      	ldrh	r3, [r4, #12]
 8001d80:	071a      	lsls	r2, r3, #28
 8001d82:	d52f      	bpl.n	8001de4 <__swbuf_r+0x84>
 8001d84:	6923      	ldr	r3, [r4, #16]
 8001d86:	b36b      	cbz	r3, 8001de4 <__swbuf_r+0x84>
 8001d88:	6923      	ldr	r3, [r4, #16]
 8001d8a:	6820      	ldr	r0, [r4, #0]
 8001d8c:	1ac0      	subs	r0, r0, r3
 8001d8e:	6963      	ldr	r3, [r4, #20]
 8001d90:	b2f6      	uxtb	r6, r6
 8001d92:	4283      	cmp	r3, r0
 8001d94:	4637      	mov	r7, r6
 8001d96:	dc04      	bgt.n	8001da2 <__swbuf_r+0x42>
 8001d98:	4621      	mov	r1, r4
 8001d9a:	4628      	mov	r0, r5
 8001d9c:	f000 f926 	bl	8001fec <_fflush_r>
 8001da0:	bb30      	cbnz	r0, 8001df0 <__swbuf_r+0x90>
 8001da2:	68a3      	ldr	r3, [r4, #8]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	60a3      	str	r3, [r4, #8]
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	6022      	str	r2, [r4, #0]
 8001dae:	701e      	strb	r6, [r3, #0]
 8001db0:	6963      	ldr	r3, [r4, #20]
 8001db2:	3001      	adds	r0, #1
 8001db4:	4283      	cmp	r3, r0
 8001db6:	d004      	beq.n	8001dc2 <__swbuf_r+0x62>
 8001db8:	89a3      	ldrh	r3, [r4, #12]
 8001dba:	07db      	lsls	r3, r3, #31
 8001dbc:	d506      	bpl.n	8001dcc <__swbuf_r+0x6c>
 8001dbe:	2e0a      	cmp	r6, #10
 8001dc0:	d104      	bne.n	8001dcc <__swbuf_r+0x6c>
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	f000 f911 	bl	8001fec <_fflush_r>
 8001dca:	b988      	cbnz	r0, 8001df0 <__swbuf_r+0x90>
 8001dcc:	4638      	mov	r0, r7
 8001dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <__swbuf_r+0x9c>)
 8001dd2:	429c      	cmp	r4, r3
 8001dd4:	d101      	bne.n	8001dda <__swbuf_r+0x7a>
 8001dd6:	68ac      	ldr	r4, [r5, #8]
 8001dd8:	e7cf      	b.n	8001d7a <__swbuf_r+0x1a>
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <__swbuf_r+0xa0>)
 8001ddc:	429c      	cmp	r4, r3
 8001dde:	bf08      	it	eq
 8001de0:	68ec      	ldreq	r4, [r5, #12]
 8001de2:	e7ca      	b.n	8001d7a <__swbuf_r+0x1a>
 8001de4:	4621      	mov	r1, r4
 8001de6:	4628      	mov	r0, r5
 8001de8:	f000 f80c 	bl	8001e04 <__swsetup_r>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d0cb      	beq.n	8001d88 <__swbuf_r+0x28>
 8001df0:	f04f 37ff 	mov.w	r7, #4294967295
 8001df4:	e7ea      	b.n	8001dcc <__swbuf_r+0x6c>
 8001df6:	bf00      	nop
 8001df8:	08002694 	.word	0x08002694
 8001dfc:	080026b4 	.word	0x080026b4
 8001e00:	08002674 	.word	0x08002674

08001e04 <__swsetup_r>:
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <__swsetup_r+0xcc>)
 8001e06:	b570      	push	{r4, r5, r6, lr}
 8001e08:	681d      	ldr	r5, [r3, #0]
 8001e0a:	4606      	mov	r6, r0
 8001e0c:	460c      	mov	r4, r1
 8001e0e:	b125      	cbz	r5, 8001e1a <__swsetup_r+0x16>
 8001e10:	69ab      	ldr	r3, [r5, #24]
 8001e12:	b913      	cbnz	r3, 8001e1a <__swsetup_r+0x16>
 8001e14:	4628      	mov	r0, r5
 8001e16:	f000 f97d 	bl	8002114 <__sinit>
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <__swsetup_r+0xd0>)
 8001e1c:	429c      	cmp	r4, r3
 8001e1e:	d10f      	bne.n	8001e40 <__swsetup_r+0x3c>
 8001e20:	686c      	ldr	r4, [r5, #4]
 8001e22:	89a3      	ldrh	r3, [r4, #12]
 8001e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e28:	0719      	lsls	r1, r3, #28
 8001e2a:	d42c      	bmi.n	8001e86 <__swsetup_r+0x82>
 8001e2c:	06dd      	lsls	r5, r3, #27
 8001e2e:	d411      	bmi.n	8001e54 <__swsetup_r+0x50>
 8001e30:	2309      	movs	r3, #9
 8001e32:	6033      	str	r3, [r6, #0]
 8001e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e38:	81a3      	strh	r3, [r4, #12]
 8001e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3e:	e03e      	b.n	8001ebe <__swsetup_r+0xba>
 8001e40:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <__swsetup_r+0xd4>)
 8001e42:	429c      	cmp	r4, r3
 8001e44:	d101      	bne.n	8001e4a <__swsetup_r+0x46>
 8001e46:	68ac      	ldr	r4, [r5, #8]
 8001e48:	e7eb      	b.n	8001e22 <__swsetup_r+0x1e>
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <__swsetup_r+0xd8>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	bf08      	it	eq
 8001e50:	68ec      	ldreq	r4, [r5, #12]
 8001e52:	e7e6      	b.n	8001e22 <__swsetup_r+0x1e>
 8001e54:	0758      	lsls	r0, r3, #29
 8001e56:	d512      	bpl.n	8001e7e <__swsetup_r+0x7a>
 8001e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e5a:	b141      	cbz	r1, 8001e6e <__swsetup_r+0x6a>
 8001e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e60:	4299      	cmp	r1, r3
 8001e62:	d002      	beq.n	8001e6a <__swsetup_r+0x66>
 8001e64:	4630      	mov	r0, r6
 8001e66:	f000 fa59 	bl	800231c <_free_r>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e74:	81a3      	strh	r3, [r4, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	6063      	str	r3, [r4, #4]
 8001e7a:	6923      	ldr	r3, [r4, #16]
 8001e7c:	6023      	str	r3, [r4, #0]
 8001e7e:	89a3      	ldrh	r3, [r4, #12]
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	81a3      	strh	r3, [r4, #12]
 8001e86:	6923      	ldr	r3, [r4, #16]
 8001e88:	b94b      	cbnz	r3, 8001e9e <__swsetup_r+0x9a>
 8001e8a:	89a3      	ldrh	r3, [r4, #12]
 8001e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e94:	d003      	beq.n	8001e9e <__swsetup_r+0x9a>
 8001e96:	4621      	mov	r1, r4
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f000 f9ff 	bl	800229c <__smakebuf_r>
 8001e9e:	89a0      	ldrh	r0, [r4, #12]
 8001ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ea4:	f010 0301 	ands.w	r3, r0, #1
 8001ea8:	d00a      	beq.n	8001ec0 <__swsetup_r+0xbc>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60a3      	str	r3, [r4, #8]
 8001eae:	6963      	ldr	r3, [r4, #20]
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	61a3      	str	r3, [r4, #24]
 8001eb4:	6923      	ldr	r3, [r4, #16]
 8001eb6:	b943      	cbnz	r3, 8001eca <__swsetup_r+0xc6>
 8001eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ebc:	d1ba      	bne.n	8001e34 <__swsetup_r+0x30>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	0781      	lsls	r1, r0, #30
 8001ec2:	bf58      	it	pl
 8001ec4:	6963      	ldrpl	r3, [r4, #20]
 8001ec6:	60a3      	str	r3, [r4, #8]
 8001ec8:	e7f4      	b.n	8001eb4 <__swsetup_r+0xb0>
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e7f7      	b.n	8001ebe <__swsetup_r+0xba>
 8001ece:	bf00      	nop
 8001ed0:	20000014 	.word	0x20000014
 8001ed4:	08002694 	.word	0x08002694
 8001ed8:	080026b4 	.word	0x080026b4
 8001edc:	08002674 	.word	0x08002674

08001ee0 <__sflush_r>:
 8001ee0:	898a      	ldrh	r2, [r1, #12]
 8001ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee6:	4605      	mov	r5, r0
 8001ee8:	0710      	lsls	r0, r2, #28
 8001eea:	460c      	mov	r4, r1
 8001eec:	d458      	bmi.n	8001fa0 <__sflush_r+0xc0>
 8001eee:	684b      	ldr	r3, [r1, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dc05      	bgt.n	8001f00 <__sflush_r+0x20>
 8001ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dc02      	bgt.n	8001f00 <__sflush_r+0x20>
 8001efa:	2000      	movs	r0, #0
 8001efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f02:	2e00      	cmp	r6, #0
 8001f04:	d0f9      	beq.n	8001efa <__sflush_r+0x1a>
 8001f06:	2300      	movs	r3, #0
 8001f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f0c:	682f      	ldr	r7, [r5, #0]
 8001f0e:	602b      	str	r3, [r5, #0]
 8001f10:	d032      	beq.n	8001f78 <__sflush_r+0x98>
 8001f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f14:	89a3      	ldrh	r3, [r4, #12]
 8001f16:	075a      	lsls	r2, r3, #29
 8001f18:	d505      	bpl.n	8001f26 <__sflush_r+0x46>
 8001f1a:	6863      	ldr	r3, [r4, #4]
 8001f1c:	1ac0      	subs	r0, r0, r3
 8001f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f20:	b10b      	cbz	r3, 8001f26 <__sflush_r+0x46>
 8001f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f24:	1ac0      	subs	r0, r0, r3
 8001f26:	2300      	movs	r3, #0
 8001f28:	4602      	mov	r2, r0
 8001f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f2c:	6a21      	ldr	r1, [r4, #32]
 8001f2e:	4628      	mov	r0, r5
 8001f30:	47b0      	blx	r6
 8001f32:	1c43      	adds	r3, r0, #1
 8001f34:	89a3      	ldrh	r3, [r4, #12]
 8001f36:	d106      	bne.n	8001f46 <__sflush_r+0x66>
 8001f38:	6829      	ldr	r1, [r5, #0]
 8001f3a:	291d      	cmp	r1, #29
 8001f3c:	d82c      	bhi.n	8001f98 <__sflush_r+0xb8>
 8001f3e:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <__sflush_r+0x108>)
 8001f40:	40ca      	lsrs	r2, r1
 8001f42:	07d6      	lsls	r6, r2, #31
 8001f44:	d528      	bpl.n	8001f98 <__sflush_r+0xb8>
 8001f46:	2200      	movs	r2, #0
 8001f48:	6062      	str	r2, [r4, #4]
 8001f4a:	04d9      	lsls	r1, r3, #19
 8001f4c:	6922      	ldr	r2, [r4, #16]
 8001f4e:	6022      	str	r2, [r4, #0]
 8001f50:	d504      	bpl.n	8001f5c <__sflush_r+0x7c>
 8001f52:	1c42      	adds	r2, r0, #1
 8001f54:	d101      	bne.n	8001f5a <__sflush_r+0x7a>
 8001f56:	682b      	ldr	r3, [r5, #0]
 8001f58:	b903      	cbnz	r3, 8001f5c <__sflush_r+0x7c>
 8001f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8001f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f5e:	602f      	str	r7, [r5, #0]
 8001f60:	2900      	cmp	r1, #0
 8001f62:	d0ca      	beq.n	8001efa <__sflush_r+0x1a>
 8001f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f68:	4299      	cmp	r1, r3
 8001f6a:	d002      	beq.n	8001f72 <__sflush_r+0x92>
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f000 f9d5 	bl	800231c <_free_r>
 8001f72:	2000      	movs	r0, #0
 8001f74:	6360      	str	r0, [r4, #52]	; 0x34
 8001f76:	e7c1      	b.n	8001efc <__sflush_r+0x1c>
 8001f78:	6a21      	ldr	r1, [r4, #32]
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	47b0      	blx	r6
 8001f80:	1c41      	adds	r1, r0, #1
 8001f82:	d1c7      	bne.n	8001f14 <__sflush_r+0x34>
 8001f84:	682b      	ldr	r3, [r5, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0c4      	beq.n	8001f14 <__sflush_r+0x34>
 8001f8a:	2b1d      	cmp	r3, #29
 8001f8c:	d001      	beq.n	8001f92 <__sflush_r+0xb2>
 8001f8e:	2b16      	cmp	r3, #22
 8001f90:	d101      	bne.n	8001f96 <__sflush_r+0xb6>
 8001f92:	602f      	str	r7, [r5, #0]
 8001f94:	e7b1      	b.n	8001efa <__sflush_r+0x1a>
 8001f96:	89a3      	ldrh	r3, [r4, #12]
 8001f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9c:	81a3      	strh	r3, [r4, #12]
 8001f9e:	e7ad      	b.n	8001efc <__sflush_r+0x1c>
 8001fa0:	690f      	ldr	r7, [r1, #16]
 8001fa2:	2f00      	cmp	r7, #0
 8001fa4:	d0a9      	beq.n	8001efa <__sflush_r+0x1a>
 8001fa6:	0793      	lsls	r3, r2, #30
 8001fa8:	680e      	ldr	r6, [r1, #0]
 8001faa:	bf08      	it	eq
 8001fac:	694b      	ldreq	r3, [r1, #20]
 8001fae:	600f      	str	r7, [r1, #0]
 8001fb0:	bf18      	it	ne
 8001fb2:	2300      	movne	r3, #0
 8001fb4:	eba6 0807 	sub.w	r8, r6, r7
 8001fb8:	608b      	str	r3, [r1, #8]
 8001fba:	f1b8 0f00 	cmp.w	r8, #0
 8001fbe:	dd9c      	ble.n	8001efa <__sflush_r+0x1a>
 8001fc0:	6a21      	ldr	r1, [r4, #32]
 8001fc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001fc4:	4643      	mov	r3, r8
 8001fc6:	463a      	mov	r2, r7
 8001fc8:	4628      	mov	r0, r5
 8001fca:	47b0      	blx	r6
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	dc06      	bgt.n	8001fde <__sflush_r+0xfe>
 8001fd0:	89a3      	ldrh	r3, [r4, #12]
 8001fd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fd6:	81a3      	strh	r3, [r4, #12]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	e78e      	b.n	8001efc <__sflush_r+0x1c>
 8001fde:	4407      	add	r7, r0
 8001fe0:	eba8 0800 	sub.w	r8, r8, r0
 8001fe4:	e7e9      	b.n	8001fba <__sflush_r+0xda>
 8001fe6:	bf00      	nop
 8001fe8:	20400001 	.word	0x20400001

08001fec <_fflush_r>:
 8001fec:	b538      	push	{r3, r4, r5, lr}
 8001fee:	690b      	ldr	r3, [r1, #16]
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	b913      	cbnz	r3, 8001ffc <_fflush_r+0x10>
 8001ff6:	2500      	movs	r5, #0
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}
 8001ffc:	b118      	cbz	r0, 8002006 <_fflush_r+0x1a>
 8001ffe:	6983      	ldr	r3, [r0, #24]
 8002000:	b90b      	cbnz	r3, 8002006 <_fflush_r+0x1a>
 8002002:	f000 f887 	bl	8002114 <__sinit>
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <_fflush_r+0x6c>)
 8002008:	429c      	cmp	r4, r3
 800200a:	d11b      	bne.n	8002044 <_fflush_r+0x58>
 800200c:	686c      	ldr	r4, [r5, #4]
 800200e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ef      	beq.n	8001ff6 <_fflush_r+0xa>
 8002016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002018:	07d0      	lsls	r0, r2, #31
 800201a:	d404      	bmi.n	8002026 <_fflush_r+0x3a>
 800201c:	0599      	lsls	r1, r3, #22
 800201e:	d402      	bmi.n	8002026 <_fflush_r+0x3a>
 8002020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002022:	f000 f915 	bl	8002250 <__retarget_lock_acquire_recursive>
 8002026:	4628      	mov	r0, r5
 8002028:	4621      	mov	r1, r4
 800202a:	f7ff ff59 	bl	8001ee0 <__sflush_r>
 800202e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002030:	07da      	lsls	r2, r3, #31
 8002032:	4605      	mov	r5, r0
 8002034:	d4e0      	bmi.n	8001ff8 <_fflush_r+0xc>
 8002036:	89a3      	ldrh	r3, [r4, #12]
 8002038:	059b      	lsls	r3, r3, #22
 800203a:	d4dd      	bmi.n	8001ff8 <_fflush_r+0xc>
 800203c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800203e:	f000 f908 	bl	8002252 <__retarget_lock_release_recursive>
 8002042:	e7d9      	b.n	8001ff8 <_fflush_r+0xc>
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <_fflush_r+0x70>)
 8002046:	429c      	cmp	r4, r3
 8002048:	d101      	bne.n	800204e <_fflush_r+0x62>
 800204a:	68ac      	ldr	r4, [r5, #8]
 800204c:	e7df      	b.n	800200e <_fflush_r+0x22>
 800204e:	4b04      	ldr	r3, [pc, #16]	; (8002060 <_fflush_r+0x74>)
 8002050:	429c      	cmp	r4, r3
 8002052:	bf08      	it	eq
 8002054:	68ec      	ldreq	r4, [r5, #12]
 8002056:	e7da      	b.n	800200e <_fflush_r+0x22>
 8002058:	08002694 	.word	0x08002694
 800205c:	080026b4 	.word	0x080026b4
 8002060:	08002674 	.word	0x08002674

08002064 <std>:
 8002064:	2300      	movs	r3, #0
 8002066:	b510      	push	{r4, lr}
 8002068:	4604      	mov	r4, r0
 800206a:	e9c0 3300 	strd	r3, r3, [r0]
 800206e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002072:	6083      	str	r3, [r0, #8]
 8002074:	8181      	strh	r1, [r0, #12]
 8002076:	6643      	str	r3, [r0, #100]	; 0x64
 8002078:	81c2      	strh	r2, [r0, #14]
 800207a:	6183      	str	r3, [r0, #24]
 800207c:	4619      	mov	r1, r3
 800207e:	2208      	movs	r2, #8
 8002080:	305c      	adds	r0, #92	; 0x5c
 8002082:	f7ff fdef 	bl	8001c64 <memset>
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <std+0x38>)
 8002088:	6263      	str	r3, [r4, #36]	; 0x24
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <std+0x3c>)
 800208c:	62a3      	str	r3, [r4, #40]	; 0x28
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <std+0x40>)
 8002090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <std+0x44>)
 8002094:	6224      	str	r4, [r4, #32]
 8002096:	6323      	str	r3, [r4, #48]	; 0x30
 8002098:	bd10      	pop	{r4, pc}
 800209a:	bf00      	nop
 800209c:	0800248d 	.word	0x0800248d
 80020a0:	080024af 	.word	0x080024af
 80020a4:	080024e7 	.word	0x080024e7
 80020a8:	0800250b 	.word	0x0800250b

080020ac <_cleanup_r>:
 80020ac:	4901      	ldr	r1, [pc, #4]	; (80020b4 <_cleanup_r+0x8>)
 80020ae:	f000 b8af 	b.w	8002210 <_fwalk_reent>
 80020b2:	bf00      	nop
 80020b4:	08001fed 	.word	0x08001fed

080020b8 <__sfmoreglue>:
 80020b8:	b570      	push	{r4, r5, r6, lr}
 80020ba:	1e4a      	subs	r2, r1, #1
 80020bc:	2568      	movs	r5, #104	; 0x68
 80020be:	4355      	muls	r5, r2
 80020c0:	460e      	mov	r6, r1
 80020c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020c6:	f000 f977 	bl	80023b8 <_malloc_r>
 80020ca:	4604      	mov	r4, r0
 80020cc:	b140      	cbz	r0, 80020e0 <__sfmoreglue+0x28>
 80020ce:	2100      	movs	r1, #0
 80020d0:	e9c0 1600 	strd	r1, r6, [r0]
 80020d4:	300c      	adds	r0, #12
 80020d6:	60a0      	str	r0, [r4, #8]
 80020d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020dc:	f7ff fdc2 	bl	8001c64 <memset>
 80020e0:	4620      	mov	r0, r4
 80020e2:	bd70      	pop	{r4, r5, r6, pc}

080020e4 <__sfp_lock_acquire>:
 80020e4:	4801      	ldr	r0, [pc, #4]	; (80020ec <__sfp_lock_acquire+0x8>)
 80020e6:	f000 b8b3 	b.w	8002250 <__retarget_lock_acquire_recursive>
 80020ea:	bf00      	nop
 80020ec:	20000110 	.word	0x20000110

080020f0 <__sfp_lock_release>:
 80020f0:	4801      	ldr	r0, [pc, #4]	; (80020f8 <__sfp_lock_release+0x8>)
 80020f2:	f000 b8ae 	b.w	8002252 <__retarget_lock_release_recursive>
 80020f6:	bf00      	nop
 80020f8:	20000110 	.word	0x20000110

080020fc <__sinit_lock_acquire>:
 80020fc:	4801      	ldr	r0, [pc, #4]	; (8002104 <__sinit_lock_acquire+0x8>)
 80020fe:	f000 b8a7 	b.w	8002250 <__retarget_lock_acquire_recursive>
 8002102:	bf00      	nop
 8002104:	2000010b 	.word	0x2000010b

08002108 <__sinit_lock_release>:
 8002108:	4801      	ldr	r0, [pc, #4]	; (8002110 <__sinit_lock_release+0x8>)
 800210a:	f000 b8a2 	b.w	8002252 <__retarget_lock_release_recursive>
 800210e:	bf00      	nop
 8002110:	2000010b 	.word	0x2000010b

08002114 <__sinit>:
 8002114:	b510      	push	{r4, lr}
 8002116:	4604      	mov	r4, r0
 8002118:	f7ff fff0 	bl	80020fc <__sinit_lock_acquire>
 800211c:	69a3      	ldr	r3, [r4, #24]
 800211e:	b11b      	cbz	r3, 8002128 <__sinit+0x14>
 8002120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002124:	f7ff bff0 	b.w	8002108 <__sinit_lock_release>
 8002128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800212c:	6523      	str	r3, [r4, #80]	; 0x50
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <__sinit+0x68>)
 8002130:	4a13      	ldr	r2, [pc, #76]	; (8002180 <__sinit+0x6c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	62a2      	str	r2, [r4, #40]	; 0x28
 8002136:	42a3      	cmp	r3, r4
 8002138:	bf04      	itt	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	61a3      	streq	r3, [r4, #24]
 800213e:	4620      	mov	r0, r4
 8002140:	f000 f820 	bl	8002184 <__sfp>
 8002144:	6060      	str	r0, [r4, #4]
 8002146:	4620      	mov	r0, r4
 8002148:	f000 f81c 	bl	8002184 <__sfp>
 800214c:	60a0      	str	r0, [r4, #8]
 800214e:	4620      	mov	r0, r4
 8002150:	f000 f818 	bl	8002184 <__sfp>
 8002154:	2200      	movs	r2, #0
 8002156:	60e0      	str	r0, [r4, #12]
 8002158:	2104      	movs	r1, #4
 800215a:	6860      	ldr	r0, [r4, #4]
 800215c:	f7ff ff82 	bl	8002064 <std>
 8002160:	68a0      	ldr	r0, [r4, #8]
 8002162:	2201      	movs	r2, #1
 8002164:	2109      	movs	r1, #9
 8002166:	f7ff ff7d 	bl	8002064 <std>
 800216a:	68e0      	ldr	r0, [r4, #12]
 800216c:	2202      	movs	r2, #2
 800216e:	2112      	movs	r1, #18
 8002170:	f7ff ff78 	bl	8002064 <std>
 8002174:	2301      	movs	r3, #1
 8002176:	61a3      	str	r3, [r4, #24]
 8002178:	e7d2      	b.n	8002120 <__sinit+0xc>
 800217a:	bf00      	nop
 800217c:	08002670 	.word	0x08002670
 8002180:	080020ad 	.word	0x080020ad

08002184 <__sfp>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	4607      	mov	r7, r0
 8002188:	f7ff ffac 	bl	80020e4 <__sfp_lock_acquire>
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <__sfp+0x84>)
 800218e:	681e      	ldr	r6, [r3, #0]
 8002190:	69b3      	ldr	r3, [r6, #24]
 8002192:	b913      	cbnz	r3, 800219a <__sfp+0x16>
 8002194:	4630      	mov	r0, r6
 8002196:	f7ff ffbd 	bl	8002114 <__sinit>
 800219a:	3648      	adds	r6, #72	; 0x48
 800219c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	d503      	bpl.n	80021ac <__sfp+0x28>
 80021a4:	6833      	ldr	r3, [r6, #0]
 80021a6:	b30b      	cbz	r3, 80021ec <__sfp+0x68>
 80021a8:	6836      	ldr	r6, [r6, #0]
 80021aa:	e7f7      	b.n	800219c <__sfp+0x18>
 80021ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021b0:	b9d5      	cbnz	r5, 80021e8 <__sfp+0x64>
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <__sfp+0x88>)
 80021b4:	60e3      	str	r3, [r4, #12]
 80021b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021ba:	6665      	str	r5, [r4, #100]	; 0x64
 80021bc:	f000 f847 	bl	800224e <__retarget_lock_init_recursive>
 80021c0:	f7ff ff96 	bl	80020f0 <__sfp_lock_release>
 80021c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021cc:	6025      	str	r5, [r4, #0]
 80021ce:	61a5      	str	r5, [r4, #24]
 80021d0:	2208      	movs	r2, #8
 80021d2:	4629      	mov	r1, r5
 80021d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021d8:	f7ff fd44 	bl	8001c64 <memset>
 80021dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80021e4:	4620      	mov	r0, r4
 80021e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021e8:	3468      	adds	r4, #104	; 0x68
 80021ea:	e7d9      	b.n	80021a0 <__sfp+0x1c>
 80021ec:	2104      	movs	r1, #4
 80021ee:	4638      	mov	r0, r7
 80021f0:	f7ff ff62 	bl	80020b8 <__sfmoreglue>
 80021f4:	4604      	mov	r4, r0
 80021f6:	6030      	str	r0, [r6, #0]
 80021f8:	2800      	cmp	r0, #0
 80021fa:	d1d5      	bne.n	80021a8 <__sfp+0x24>
 80021fc:	f7ff ff78 	bl	80020f0 <__sfp_lock_release>
 8002200:	230c      	movs	r3, #12
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	e7ee      	b.n	80021e4 <__sfp+0x60>
 8002206:	bf00      	nop
 8002208:	08002670 	.word	0x08002670
 800220c:	ffff0001 	.word	0xffff0001

08002210 <_fwalk_reent>:
 8002210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002214:	4606      	mov	r6, r0
 8002216:	4688      	mov	r8, r1
 8002218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800221c:	2700      	movs	r7, #0
 800221e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002222:	f1b9 0901 	subs.w	r9, r9, #1
 8002226:	d505      	bpl.n	8002234 <_fwalk_reent+0x24>
 8002228:	6824      	ldr	r4, [r4, #0]
 800222a:	2c00      	cmp	r4, #0
 800222c:	d1f7      	bne.n	800221e <_fwalk_reent+0xe>
 800222e:	4638      	mov	r0, r7
 8002230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002234:	89ab      	ldrh	r3, [r5, #12]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d907      	bls.n	800224a <_fwalk_reent+0x3a>
 800223a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800223e:	3301      	adds	r3, #1
 8002240:	d003      	beq.n	800224a <_fwalk_reent+0x3a>
 8002242:	4629      	mov	r1, r5
 8002244:	4630      	mov	r0, r6
 8002246:	47c0      	blx	r8
 8002248:	4307      	orrs	r7, r0
 800224a:	3568      	adds	r5, #104	; 0x68
 800224c:	e7e9      	b.n	8002222 <_fwalk_reent+0x12>

0800224e <__retarget_lock_init_recursive>:
 800224e:	4770      	bx	lr

08002250 <__retarget_lock_acquire_recursive>:
 8002250:	4770      	bx	lr

08002252 <__retarget_lock_release_recursive>:
 8002252:	4770      	bx	lr

08002254 <__swhatbuf_r>:
 8002254:	b570      	push	{r4, r5, r6, lr}
 8002256:	460e      	mov	r6, r1
 8002258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800225c:	2900      	cmp	r1, #0
 800225e:	b096      	sub	sp, #88	; 0x58
 8002260:	4614      	mov	r4, r2
 8002262:	461d      	mov	r5, r3
 8002264:	da07      	bge.n	8002276 <__swhatbuf_r+0x22>
 8002266:	2300      	movs	r3, #0
 8002268:	602b      	str	r3, [r5, #0]
 800226a:	89b3      	ldrh	r3, [r6, #12]
 800226c:	061a      	lsls	r2, r3, #24
 800226e:	d410      	bmi.n	8002292 <__swhatbuf_r+0x3e>
 8002270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002274:	e00e      	b.n	8002294 <__swhatbuf_r+0x40>
 8002276:	466a      	mov	r2, sp
 8002278:	f000 f96e 	bl	8002558 <_fstat_r>
 800227c:	2800      	cmp	r0, #0
 800227e:	dbf2      	blt.n	8002266 <__swhatbuf_r+0x12>
 8002280:	9a01      	ldr	r2, [sp, #4]
 8002282:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002286:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800228a:	425a      	negs	r2, r3
 800228c:	415a      	adcs	r2, r3
 800228e:	602a      	str	r2, [r5, #0]
 8002290:	e7ee      	b.n	8002270 <__swhatbuf_r+0x1c>
 8002292:	2340      	movs	r3, #64	; 0x40
 8002294:	2000      	movs	r0, #0
 8002296:	6023      	str	r3, [r4, #0]
 8002298:	b016      	add	sp, #88	; 0x58
 800229a:	bd70      	pop	{r4, r5, r6, pc}

0800229c <__smakebuf_r>:
 800229c:	898b      	ldrh	r3, [r1, #12]
 800229e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022a0:	079d      	lsls	r5, r3, #30
 80022a2:	4606      	mov	r6, r0
 80022a4:	460c      	mov	r4, r1
 80022a6:	d507      	bpl.n	80022b8 <__smakebuf_r+0x1c>
 80022a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022ac:	6023      	str	r3, [r4, #0]
 80022ae:	6123      	str	r3, [r4, #16]
 80022b0:	2301      	movs	r3, #1
 80022b2:	6163      	str	r3, [r4, #20]
 80022b4:	b002      	add	sp, #8
 80022b6:	bd70      	pop	{r4, r5, r6, pc}
 80022b8:	ab01      	add	r3, sp, #4
 80022ba:	466a      	mov	r2, sp
 80022bc:	f7ff ffca 	bl	8002254 <__swhatbuf_r>
 80022c0:	9900      	ldr	r1, [sp, #0]
 80022c2:	4605      	mov	r5, r0
 80022c4:	4630      	mov	r0, r6
 80022c6:	f000 f877 	bl	80023b8 <_malloc_r>
 80022ca:	b948      	cbnz	r0, 80022e0 <__smakebuf_r+0x44>
 80022cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022d0:	059a      	lsls	r2, r3, #22
 80022d2:	d4ef      	bmi.n	80022b4 <__smakebuf_r+0x18>
 80022d4:	f023 0303 	bic.w	r3, r3, #3
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	81a3      	strh	r3, [r4, #12]
 80022de:	e7e3      	b.n	80022a8 <__smakebuf_r+0xc>
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <__smakebuf_r+0x7c>)
 80022e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80022e4:	89a3      	ldrh	r3, [r4, #12]
 80022e6:	6020      	str	r0, [r4, #0]
 80022e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ec:	81a3      	strh	r3, [r4, #12]
 80022ee:	9b00      	ldr	r3, [sp, #0]
 80022f0:	6163      	str	r3, [r4, #20]
 80022f2:	9b01      	ldr	r3, [sp, #4]
 80022f4:	6120      	str	r0, [r4, #16]
 80022f6:	b15b      	cbz	r3, 8002310 <__smakebuf_r+0x74>
 80022f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022fc:	4630      	mov	r0, r6
 80022fe:	f000 f93d 	bl	800257c <_isatty_r>
 8002302:	b128      	cbz	r0, 8002310 <__smakebuf_r+0x74>
 8002304:	89a3      	ldrh	r3, [r4, #12]
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	81a3      	strh	r3, [r4, #12]
 8002310:	89a0      	ldrh	r0, [r4, #12]
 8002312:	4305      	orrs	r5, r0
 8002314:	81a5      	strh	r5, [r4, #12]
 8002316:	e7cd      	b.n	80022b4 <__smakebuf_r+0x18>
 8002318:	080020ad 	.word	0x080020ad

0800231c <_free_r>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4605      	mov	r5, r0
 8002320:	2900      	cmp	r1, #0
 8002322:	d045      	beq.n	80023b0 <_free_r+0x94>
 8002324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002328:	1f0c      	subs	r4, r1, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	bfb8      	it	lt
 800232e:	18e4      	addlt	r4, r4, r3
 8002330:	f000 f946 	bl	80025c0 <__malloc_lock>
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <_free_r+0x98>)
 8002336:	6813      	ldr	r3, [r2, #0]
 8002338:	4610      	mov	r0, r2
 800233a:	b933      	cbnz	r3, 800234a <_free_r+0x2e>
 800233c:	6063      	str	r3, [r4, #4]
 800233e:	6014      	str	r4, [r2, #0]
 8002340:	4628      	mov	r0, r5
 8002342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002346:	f000 b941 	b.w	80025cc <__malloc_unlock>
 800234a:	42a3      	cmp	r3, r4
 800234c:	d90b      	bls.n	8002366 <_free_r+0x4a>
 800234e:	6821      	ldr	r1, [r4, #0]
 8002350:	1862      	adds	r2, r4, r1
 8002352:	4293      	cmp	r3, r2
 8002354:	bf04      	itt	eq
 8002356:	681a      	ldreq	r2, [r3, #0]
 8002358:	685b      	ldreq	r3, [r3, #4]
 800235a:	6063      	str	r3, [r4, #4]
 800235c:	bf04      	itt	eq
 800235e:	1852      	addeq	r2, r2, r1
 8002360:	6022      	streq	r2, [r4, #0]
 8002362:	6004      	str	r4, [r0, #0]
 8002364:	e7ec      	b.n	8002340 <_free_r+0x24>
 8002366:	461a      	mov	r2, r3
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	b10b      	cbz	r3, 8002370 <_free_r+0x54>
 800236c:	42a3      	cmp	r3, r4
 800236e:	d9fa      	bls.n	8002366 <_free_r+0x4a>
 8002370:	6811      	ldr	r1, [r2, #0]
 8002372:	1850      	adds	r0, r2, r1
 8002374:	42a0      	cmp	r0, r4
 8002376:	d10b      	bne.n	8002390 <_free_r+0x74>
 8002378:	6820      	ldr	r0, [r4, #0]
 800237a:	4401      	add	r1, r0
 800237c:	1850      	adds	r0, r2, r1
 800237e:	4283      	cmp	r3, r0
 8002380:	6011      	str	r1, [r2, #0]
 8002382:	d1dd      	bne.n	8002340 <_free_r+0x24>
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	6053      	str	r3, [r2, #4]
 800238a:	4401      	add	r1, r0
 800238c:	6011      	str	r1, [r2, #0]
 800238e:	e7d7      	b.n	8002340 <_free_r+0x24>
 8002390:	d902      	bls.n	8002398 <_free_r+0x7c>
 8002392:	230c      	movs	r3, #12
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	e7d3      	b.n	8002340 <_free_r+0x24>
 8002398:	6820      	ldr	r0, [r4, #0]
 800239a:	1821      	adds	r1, r4, r0
 800239c:	428b      	cmp	r3, r1
 800239e:	bf04      	itt	eq
 80023a0:	6819      	ldreq	r1, [r3, #0]
 80023a2:	685b      	ldreq	r3, [r3, #4]
 80023a4:	6063      	str	r3, [r4, #4]
 80023a6:	bf04      	itt	eq
 80023a8:	1809      	addeq	r1, r1, r0
 80023aa:	6021      	streq	r1, [r4, #0]
 80023ac:	6054      	str	r4, [r2, #4]
 80023ae:	e7c7      	b.n	8002340 <_free_r+0x24>
 80023b0:	bd38      	pop	{r3, r4, r5, pc}
 80023b2:	bf00      	nop
 80023b4:	200000b0 	.word	0x200000b0

080023b8 <_malloc_r>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	1ccd      	adds	r5, r1, #3
 80023bc:	f025 0503 	bic.w	r5, r5, #3
 80023c0:	3508      	adds	r5, #8
 80023c2:	2d0c      	cmp	r5, #12
 80023c4:	bf38      	it	cc
 80023c6:	250c      	movcc	r5, #12
 80023c8:	2d00      	cmp	r5, #0
 80023ca:	4606      	mov	r6, r0
 80023cc:	db01      	blt.n	80023d2 <_malloc_r+0x1a>
 80023ce:	42a9      	cmp	r1, r5
 80023d0:	d903      	bls.n	80023da <_malloc_r+0x22>
 80023d2:	230c      	movs	r3, #12
 80023d4:	6033      	str	r3, [r6, #0]
 80023d6:	2000      	movs	r0, #0
 80023d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023da:	f000 f8f1 	bl	80025c0 <__malloc_lock>
 80023de:	4921      	ldr	r1, [pc, #132]	; (8002464 <_malloc_r+0xac>)
 80023e0:	680a      	ldr	r2, [r1, #0]
 80023e2:	4614      	mov	r4, r2
 80023e4:	b99c      	cbnz	r4, 800240e <_malloc_r+0x56>
 80023e6:	4f20      	ldr	r7, [pc, #128]	; (8002468 <_malloc_r+0xb0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b923      	cbnz	r3, 80023f6 <_malloc_r+0x3e>
 80023ec:	4621      	mov	r1, r4
 80023ee:	4630      	mov	r0, r6
 80023f0:	f000 f83c 	bl	800246c <_sbrk_r>
 80023f4:	6038      	str	r0, [r7, #0]
 80023f6:	4629      	mov	r1, r5
 80023f8:	4630      	mov	r0, r6
 80023fa:	f000 f837 	bl	800246c <_sbrk_r>
 80023fe:	1c43      	adds	r3, r0, #1
 8002400:	d123      	bne.n	800244a <_malloc_r+0x92>
 8002402:	230c      	movs	r3, #12
 8002404:	6033      	str	r3, [r6, #0]
 8002406:	4630      	mov	r0, r6
 8002408:	f000 f8e0 	bl	80025cc <__malloc_unlock>
 800240c:	e7e3      	b.n	80023d6 <_malloc_r+0x1e>
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	1b5b      	subs	r3, r3, r5
 8002412:	d417      	bmi.n	8002444 <_malloc_r+0x8c>
 8002414:	2b0b      	cmp	r3, #11
 8002416:	d903      	bls.n	8002420 <_malloc_r+0x68>
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	441c      	add	r4, r3
 800241c:	6025      	str	r5, [r4, #0]
 800241e:	e004      	b.n	800242a <_malloc_r+0x72>
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	42a2      	cmp	r2, r4
 8002424:	bf0c      	ite	eq
 8002426:	600b      	streq	r3, [r1, #0]
 8002428:	6053      	strne	r3, [r2, #4]
 800242a:	4630      	mov	r0, r6
 800242c:	f000 f8ce 	bl	80025cc <__malloc_unlock>
 8002430:	f104 000b 	add.w	r0, r4, #11
 8002434:	1d23      	adds	r3, r4, #4
 8002436:	f020 0007 	bic.w	r0, r0, #7
 800243a:	1ac2      	subs	r2, r0, r3
 800243c:	d0cc      	beq.n	80023d8 <_malloc_r+0x20>
 800243e:	1a1b      	subs	r3, r3, r0
 8002440:	50a3      	str	r3, [r4, r2]
 8002442:	e7c9      	b.n	80023d8 <_malloc_r+0x20>
 8002444:	4622      	mov	r2, r4
 8002446:	6864      	ldr	r4, [r4, #4]
 8002448:	e7cc      	b.n	80023e4 <_malloc_r+0x2c>
 800244a:	1cc4      	adds	r4, r0, #3
 800244c:	f024 0403 	bic.w	r4, r4, #3
 8002450:	42a0      	cmp	r0, r4
 8002452:	d0e3      	beq.n	800241c <_malloc_r+0x64>
 8002454:	1a21      	subs	r1, r4, r0
 8002456:	4630      	mov	r0, r6
 8002458:	f000 f808 	bl	800246c <_sbrk_r>
 800245c:	3001      	adds	r0, #1
 800245e:	d1dd      	bne.n	800241c <_malloc_r+0x64>
 8002460:	e7cf      	b.n	8002402 <_malloc_r+0x4a>
 8002462:	bf00      	nop
 8002464:	200000b0 	.word	0x200000b0
 8002468:	200000b4 	.word	0x200000b4

0800246c <_sbrk_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	4d06      	ldr	r5, [pc, #24]	; (8002488 <_sbrk_r+0x1c>)
 8002470:	2300      	movs	r3, #0
 8002472:	4604      	mov	r4, r0
 8002474:	4608      	mov	r0, r1
 8002476:	602b      	str	r3, [r5, #0]
 8002478:	f7fd ff18 	bl	80002ac <_sbrk>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d102      	bne.n	8002486 <_sbrk_r+0x1a>
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	b103      	cbz	r3, 8002486 <_sbrk_r+0x1a>
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	20000114 	.word	0x20000114

0800248c <__sread>:
 800248c:	b510      	push	{r4, lr}
 800248e:	460c      	mov	r4, r1
 8002490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002494:	f000 f8a0 	bl	80025d8 <_read_r>
 8002498:	2800      	cmp	r0, #0
 800249a:	bfab      	itete	ge
 800249c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800249e:	89a3      	ldrhlt	r3, [r4, #12]
 80024a0:	181b      	addge	r3, r3, r0
 80024a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80024a6:	bfac      	ite	ge
 80024a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80024aa:	81a3      	strhlt	r3, [r4, #12]
 80024ac:	bd10      	pop	{r4, pc}

080024ae <__swrite>:
 80024ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024b2:	461f      	mov	r7, r3
 80024b4:	898b      	ldrh	r3, [r1, #12]
 80024b6:	05db      	lsls	r3, r3, #23
 80024b8:	4605      	mov	r5, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	4616      	mov	r6, r2
 80024be:	d505      	bpl.n	80024cc <__swrite+0x1e>
 80024c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024c4:	2302      	movs	r3, #2
 80024c6:	2200      	movs	r2, #0
 80024c8:	f000 f868 	bl	800259c <_lseek_r>
 80024cc:	89a3      	ldrh	r3, [r4, #12]
 80024ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024d6:	81a3      	strh	r3, [r4, #12]
 80024d8:	4632      	mov	r2, r6
 80024da:	463b      	mov	r3, r7
 80024dc:	4628      	mov	r0, r5
 80024de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80024e2:	f000 b817 	b.w	8002514 <_write_r>

080024e6 <__sseek>:
 80024e6:	b510      	push	{r4, lr}
 80024e8:	460c      	mov	r4, r1
 80024ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ee:	f000 f855 	bl	800259c <_lseek_r>
 80024f2:	1c43      	adds	r3, r0, #1
 80024f4:	89a3      	ldrh	r3, [r4, #12]
 80024f6:	bf15      	itete	ne
 80024f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80024fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002502:	81a3      	strheq	r3, [r4, #12]
 8002504:	bf18      	it	ne
 8002506:	81a3      	strhne	r3, [r4, #12]
 8002508:	bd10      	pop	{r4, pc}

0800250a <__sclose>:
 800250a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800250e:	f000 b813 	b.w	8002538 <_close_r>
	...

08002514 <_write_r>:
 8002514:	b538      	push	{r3, r4, r5, lr}
 8002516:	4d07      	ldr	r5, [pc, #28]	; (8002534 <_write_r+0x20>)
 8002518:	4604      	mov	r4, r0
 800251a:	4608      	mov	r0, r1
 800251c:	4611      	mov	r1, r2
 800251e:	2200      	movs	r2, #0
 8002520:	602a      	str	r2, [r5, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	f7fd fe75 	bl	8000212 <_write>
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	d102      	bne.n	8002532 <_write_r+0x1e>
 800252c:	682b      	ldr	r3, [r5, #0]
 800252e:	b103      	cbz	r3, 8002532 <_write_r+0x1e>
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	bd38      	pop	{r3, r4, r5, pc}
 8002534:	20000114 	.word	0x20000114

08002538 <_close_r>:
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	4d06      	ldr	r5, [pc, #24]	; (8002554 <_close_r+0x1c>)
 800253c:	2300      	movs	r3, #0
 800253e:	4604      	mov	r4, r0
 8002540:	4608      	mov	r0, r1
 8002542:	602b      	str	r3, [r5, #0]
 8002544:	f7fd fe81 	bl	800024a <_close>
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d102      	bne.n	8002552 <_close_r+0x1a>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	b103      	cbz	r3, 8002552 <_close_r+0x1a>
 8002550:	6023      	str	r3, [r4, #0]
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	20000114 	.word	0x20000114

08002558 <_fstat_r>:
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4d07      	ldr	r5, [pc, #28]	; (8002578 <_fstat_r+0x20>)
 800255c:	2300      	movs	r3, #0
 800255e:	4604      	mov	r4, r0
 8002560:	4608      	mov	r0, r1
 8002562:	4611      	mov	r1, r2
 8002564:	602b      	str	r3, [r5, #0]
 8002566:	f7fd fe7b 	bl	8000260 <_fstat>
 800256a:	1c43      	adds	r3, r0, #1
 800256c:	d102      	bne.n	8002574 <_fstat_r+0x1c>
 800256e:	682b      	ldr	r3, [r5, #0]
 8002570:	b103      	cbz	r3, 8002574 <_fstat_r+0x1c>
 8002572:	6023      	str	r3, [r4, #0]
 8002574:	bd38      	pop	{r3, r4, r5, pc}
 8002576:	bf00      	nop
 8002578:	20000114 	.word	0x20000114

0800257c <_isatty_r>:
 800257c:	b538      	push	{r3, r4, r5, lr}
 800257e:	4d06      	ldr	r5, [pc, #24]	; (8002598 <_isatty_r+0x1c>)
 8002580:	2300      	movs	r3, #0
 8002582:	4604      	mov	r4, r0
 8002584:	4608      	mov	r0, r1
 8002586:	602b      	str	r3, [r5, #0]
 8002588:	f7fd fe79 	bl	800027e <_isatty>
 800258c:	1c43      	adds	r3, r0, #1
 800258e:	d102      	bne.n	8002596 <_isatty_r+0x1a>
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	b103      	cbz	r3, 8002596 <_isatty_r+0x1a>
 8002594:	6023      	str	r3, [r4, #0]
 8002596:	bd38      	pop	{r3, r4, r5, pc}
 8002598:	20000114 	.word	0x20000114

0800259c <_lseek_r>:
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	4d07      	ldr	r5, [pc, #28]	; (80025bc <_lseek_r+0x20>)
 80025a0:	4604      	mov	r4, r0
 80025a2:	4608      	mov	r0, r1
 80025a4:	4611      	mov	r1, r2
 80025a6:	2200      	movs	r2, #0
 80025a8:	602a      	str	r2, [r5, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	f7fd fe71 	bl	8000292 <_lseek>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d102      	bne.n	80025ba <_lseek_r+0x1e>
 80025b4:	682b      	ldr	r3, [r5, #0]
 80025b6:	b103      	cbz	r3, 80025ba <_lseek_r+0x1e>
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
 80025bc:	20000114 	.word	0x20000114

080025c0 <__malloc_lock>:
 80025c0:	4801      	ldr	r0, [pc, #4]	; (80025c8 <__malloc_lock+0x8>)
 80025c2:	f7ff be45 	b.w	8002250 <__retarget_lock_acquire_recursive>
 80025c6:	bf00      	nop
 80025c8:	2000010c 	.word	0x2000010c

080025cc <__malloc_unlock>:
 80025cc:	4801      	ldr	r0, [pc, #4]	; (80025d4 <__malloc_unlock+0x8>)
 80025ce:	f7ff be40 	b.w	8002252 <__retarget_lock_release_recursive>
 80025d2:	bf00      	nop
 80025d4:	2000010c 	.word	0x2000010c

080025d8 <_read_r>:
 80025d8:	b538      	push	{r3, r4, r5, lr}
 80025da:	4d07      	ldr	r5, [pc, #28]	; (80025f8 <_read_r+0x20>)
 80025dc:	4604      	mov	r4, r0
 80025de:	4608      	mov	r0, r1
 80025e0:	4611      	mov	r1, r2
 80025e2:	2200      	movs	r2, #0
 80025e4:	602a      	str	r2, [r5, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7fd fdf6 	bl	80001d8 <_read>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_read_r+0x1e>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_read_r+0x1e>
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	20000114 	.word	0x20000114

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
